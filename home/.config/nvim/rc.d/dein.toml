# Fundemental {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

#[[plugins]]
#repo = 'lambdalisue/pinkyless.vim'
#hook_add = '''
#let g:pinkyless_stickyshift_i = 0
#let g:pinkyless_stickyshift_c = 0
#let g:pinkyless_stickyshift_s = 0
#let g:pinkyless_stickyreplace_n = 0
#'''

[[plugins]]
repo = 'lambdalisue/manipulist.vim'

[[plugins]]
repo = 'lambdalisue/vim-protocol'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'lambdalisue/vim-marron'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <Leader><Leader>r <Plug>(marron-reload-vimrc)<Plug>(marron-reload-gvimrc)
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
hook_add = 'cnoreabbrev w!! :w sudo:%'

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER', 'Man']
hook_add = '''
let g:loaded_man = 1  " Disable Neovim builtin 'Man'
'''

[[plugins]]
repo = 'lambdalisue/vim-fullscreen'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <C-CR> <Plug>(fullscreen-toggle)

if exists('g:nyaovim_version')
  function! SetFullscreen(flag) abort
    call nyaovim#call_javascript_function(
          \ 'toggleWindowFullScreen',
          \ [a:flag]
          \)
  endfunction
  let g:fullscreen#start_command =
        \ 'call SetFullscreen(v:true)'
  let g:fullscreen#stop_command =
        \ 'call SetFullscreen(v:false)'
endif
'''

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = [['n', '<Plug>']]
on_cmd = 'Fontzoom'
hook_add = '''
let g:fontzoom_no_default_key_mappings = 1
nmap <C-ScrollWheelUp>   <Plug>(fontzoom-larger)
nmap <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
nmap <C-S-Up>            <Plug>(fontzoom-larger)
nmap <C-S-Down>          <Plug>(fontzoom-smaller)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
normalized_name='openbrowser'
on_map = [['nx', '<Plug>']]
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping
nmap gx <Plug>(openbrowser-smart-search)
xmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'kana/vim-repeat'
on_map = '<Plug>'
hook_add = '''
nmap .     <Plug>(repeat-.)
nmap u     <Plug>(repeat-u)
nmap U     <Plug>(repeat-U)
nmap <C-r> <Plug>(repeat-<C-r>)
nmap g-    <Plug>(repeat-g-)
nmap g+    <Plug>(repeat-g+)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
map *   <Plug>(asterisk-*)
map g*  <Plug>(asterisk-g*)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_source = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/lexima.vim'))
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
let g:submode_timeout = 0
let g:submode_keep_leaving_key = 1

if dein#is_sourced('vim-submoode')
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#leave_with('undo/redo', 'n', '', '<Esc>')
  call submode#map('undo/redo', 'n', '', '-', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')

  call submode#enter_with('tab', 'n', '', 'gt', 'gt')
  call submode#enter_with('tab', 'n', '', 'gT', 'gT')
  call submode#map('tab', 'n', '', 't', 'gt')
  call submode#map('tab', 'n', '', 'T', 'gT')

  call submode#enter_with('scroll', 'n', '', '<C-y>', '<C-y>')
  call submode#enter_with('scroll', 'n', '', '<C-e>', '<C-e>')
  call submode#enter_with('scroll', 'n', '', '<C-u>', '<C-u>')
  call submode#enter_with('scroll', 'n', '', '<C-d>', '<C-d>')
  call submode#enter_with('scroll', 'n', '', '<C-f>', '<C-f>')
  call submode#enter_with('scroll', 'n', '', '<C-b>', '<C-b>')
  call submode#map('scroll', 'n', '', 'y', '<C-y>')
  call submode#map('scroll', 'n', '', 'e', '<C-e>')
  call submode#map('scroll', 'n', '', 'u', '<C-u>')
  call submode#map('scroll', 'n', '', 'd', '<C-d>')
  call submode#map('scroll', 'n', '', 'f', '<C-f>')
  call submode#map('scroll', 'n', '', 'b', '<C-b>')
endif
'''

# }}}

# Dependency {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
merged = 0

[[plugins]]
repo = 'lambdalisue/vim-rplugin'

[[plugins]]
repo = 'tyru/current-func-info.vim'
# }}}

# Nyaovim {{{
[[plugins]]
repo = 'rhysd/nyaovim-popup-tooltip'

# }}}

# App {{{
[[plugins]]
repo = 'cocopon/vaffle.vim'
on_cmd = 'Vaffle'

[[plugins]]
repo = 'koturn/vim-replica'
on_cmd = ['Replica', 'ReplicaInternal']
on_source = '''
let g:replica#prompt = 'Â» '
let g:replica#opener = 'botright vsplit'
'''

[[plugins]]
repo = 'rizzatti/dash.vim'
on_cmd = 'Dash'

[[plugins]]
repo = 'rizzatti/dash.vim'
on_cmd = 'Dash'

[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = 'Ref'

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = 'Goyo'

[[plugins]]
repo = 'junegunn/limelight.vim'
on_cmd = 'Limelight'

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>'
hook_add = 'nmap <F2> <Plug>(altr-forward)'
hook_post_source = '''
call altr#define('autoload/%.vim', 'test/%.vimspec', 'plugin/%.vim', 'doc/%.txt')
call altr#define('lib/%.pm', 't/%.t', 'template/%.tx')
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_add = '''
let g:calendar_frame = 'default'
let g:calendar_first_day = 'sunday'
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
'''

[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = 'Gita'
hook_source = '''
let g:gita#command#browse#extra_translation_patterns = {
      \ 'ghe.admin.h': [
      \   [
      \     '\vhttps?://(%domain)/(.{-})/(.{-})%(\.git)?$',
      \     '\vgit://(%domain)/(.{-})/(.{-})%(\.git)?$',
      \     '\vgit\@(%domain):(.{-})/(.{-})%(\.git)?$',
      \     '\vssh://git\@(%domain)/(.{-})/(.{-})%(\.git)?$',
      \   ], {
      \     '_':     'https://\1/\2/\3/blob/%c1/%pt%{#L|}ls%{-L|}le',
      \     'exact': 'https://\1/\2/\3/blob/%r1/%pt%{#L|}ls%{-L|}le',
      \     'blame': 'https://\1/\2/\3/blame/%c1/%pt%{#L|}ls%{-L|}le',
      \   },
      \ ],
      \}
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
nnoremap <silent> <Space>aa :<C-u>Gina status<CR>
nnoremap <silent> <Space>ac :<C-u>Gina commit<CR>
nnoremap <silent> <Space>aC :<C-u>Gina commit --amend<CR>
nnoremap <silent> <Space>ab :<C-u>Gina br<CR>
nnoremap <silent> <Space>at :<C-u>Gina tag<CR>
nnoremap <silent> <Space>ag :<C-u>Gina grep<CR>
nnoremap <silent> <Space>aq :<C-u>Gina qrep<CR>
nnoremap <silent> <Space>ad :<C-u>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Space>al :<C-u>Gina log<CR>
nnoremap <silent> <Space>aL :<C-u>Gina log %<CR>
nnoremap <silent> <Space>af :<C-u>Gina ls<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/gina.vim'))
'''

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [
  'Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge',
  'Gpull', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog',
  'Gllog', 'Gedit', 'Gsplit', 'Gvsplit', 'Gtabedit', 'Gpedit',
  'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff',
  'Gmove', 'Gremove', 'Gblame', 'Gbrowse',
]

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = '''
let g:gista#client#default_username = 'lambdalisue'
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_cmd = 'CtrlP'
hook_source = '''
let g:ctrlp_map = '<Nop>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_cmd = [
  'VimShell',
  'VimShellTab',
  'VimShellPop',
]
hook_source = '''
highlight! vimshellError gui=NONE cterm=NONE guifg='#cc6666' ctermfg=9
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/vimshell.vim'))
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = [
  'VimFiler',
  'VimFilerExplorer',
]
hook_add = '''
nnoremap <silent> <Space>ee :<C-u>VimFilerExplorer<CR>
nnoremap <silent> <Space>eE :<C-u>VimFiler<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/vimfiler.vim'))
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
nnoremap <Plug>(my-undotree) <Nop>
nmap <Leader>u <Plug>(my-undotree)
nnoremap <silent> <Plug>(my-undotree) :<C-u>UndotreeToggle<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = [
  'Tagbar',
  'TagbarOpen',
  'TagbarToggle',
]
hook_add = '''
nnoremap <Plug>(my-tagbar) <Nop>
nmap <Leader>t <Plug>(my-tagbar)
nnoremap <silent> <Plug>(my-tagbar) :<C-u>TagbarToggle<CR>
'''

[[plugins]]
repo = 'lambdalisue/lista.nvim'
on_cmd = 'Lista'
hook_add = '''
let g:lista#custom_mappings = [
      \ ['<C-b>', '<Left>'],
      \ ['<C-f>', '<Right>'],
      \ ['<C-a>', '<Home>'],
      \ ['<C-e>', '<End>'],
      \ ['<C-d>', '<Del>'],
      \]
nnoremap #  :<C-u>Lista<CR>
nnoremap g# :<C-u>ListaResume<CR>
nnoremap !# :<C-u>ListaCursorWord<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-hopping'
on_cmd = 'HoppingStart'

# }}}

# Visualize {{{
[[plugins]]
repo = 'lambdalisue/battery.vim'
hook_add = '''
let g:battery#update_tabline = 1
'''

[[plugins]]
repo = 'lambdalisue/wifi.vim'
hook_add = '''
let g:wifi#update_tabline = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/lightline.vim'))
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_cmd = 'AnsiEsc'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_cmd = 'PrevimOpen'
hook_source = 'let g:previm_show_header = 0'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 't9md/vim-quickhl'
depends = 'vim-operator-user'
on_map = [
    '<Plug>',
    '<Plug>(operator-quickhl-manual'
]
hook_add = 'map H <Plug>(operator-quickhl-manual-this-motion)'

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 'itchyny/vim-cursorword'
hook_add = '''
let g:cursorword = 1
nnoremap <silent> <Plug>(my-toggle-cursorword)
      \ :<C-u>let g:cursorword = g:cursorword ? 0 : 1<CR>
nmap <C-g>c     <Plug>(my-toggle-cursorword)
nmap <C-g><C-c> <Plug>(my-toggle-cursorword)

function! s:disable_vim_cursorword() abort
  if &buftype =~# '\%(help\|quickfix\|terminal\|nofile\)'
    let b:cursorword = 0
  elseif &modifiable == 0
    let b:cursorword = 0
  endif
  return 0
endfunction

augroup my_vim_cursorword
  autocmd! *
  autocmd BufWinEnter,FileType * call s:disable_vim_cursorword()
augroup END
'''

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
depends = 'shabadou.vim'
hook_add = '''
let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
hook_add = 'nmap <C-w><C-w> <Plug>(choosewin)'

# }}}

# Editing {{{
[[plugins]]
repo = 'rhysd/vim-grammarous'
on_cmd = 'GrammarousCheck'

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
autocmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords() abort
  silent! %s/<+FILE NAME+>/\=expand('%:t')/g
  silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
  silent! %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
  if search('<+CURSOR+>')
    execute 'normal! "_da>'
  endif
endfunction
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
on_source = ['vimfiler.vim']

[[plugins]]
repo = 'tyru/caw.vim'
depends = [
  'vim-operator-user',
  'vim-repeat',
  'context_filetype.vim',
]
on_map = [['nx', '<Plug>']]
hook_add = '''
let g:caw_no_default_keymappings = 1
nmap gc   <Plug>(caw:prefix)
nmap gcc  <Plug>(caw:hatpos:toggle)
nmap gci  <Plug>(caw:hatpos:comment)
nmap gcui <Plug>(caw:hatpos:uncomment)
nmap gcI  <Plug>(caw:zeropos:comment)
nmap gcuI <Plug>(caw:zeropos:uncomment)
nmap gca  <Plug>(caw:dollarpos:comment)
nmap gcua <Plug>(caw:dollarpos:uncomment)
nmap gcw  <Plug>(caw:wrap:toggle)
nmap gcb  <Plug>(caw:box:comment)
xmap gc   <Plug>(caw:prefix)
xmap gcc  <Plug>(caw:hatpos:toggle)
xmap gci  <Plug>(caw:hatpos:comment)
xmap gcui <Plug>(caw:hatpos:uncomment)
xmap gcI  <Plug>(caw:zeropos:comment)
xmap gcuI <Plug>(caw:zeropos:uncomment)
xmap gca  <Plug>(caw:dollarpos:comment)
xmap gcua <Plug>(caw:dollarpos:uncomment)
xmap gcw  <Plug>(caw:wrap:toggle)
xmap gcb  <Plug>(caw:box:comment)
nmap gco  <Plug>(caw:jump:comment-next)
nmap gcO  <Plug>(caw:jump:comment-prev)
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
hook_add = '''
nmap p     <Plug>(yankround-p)
nmap P     <Plug>(yankround-P)
nmap gp    <Plug>(yankround-gp)
nmap gP    <Plug>(yankround-gP)
nmap <expr><C-k> yankround#is_active()
      \ ? "\<Plug>(yankround-prev)"
      \ : "\<C-k>"
nmap <expr><C-j> yankround#is_active()
      \ ? "\<Plug>(yankround-next)"
      \ : "\<C-j>"
'''
hook_source = 'let g:yankround_use_region_hl = 0'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = 'nnoremap <silent> \ :<C-u>Switch<CR>'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = 'Findent'
hook_add = '''
autocmd MyAutoCmd FileType * Findent --no-messages --no-warnings
'''

[[plugins]]
repo = 'lambdalisue/vim-foldround'
on_map = '<Plug>'
hook_add = '''
nmap <Leader>f <Plug>(foldround-forward)
'''

# }}}

# Execution {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
on_cmd = 'QuickRun'
hook_add = 'nmap <Space>rr <Plug>(quickrun)'
hook_source = '''
let g:quickrun_config = extend(get(g:, 'quickrun_config', {}), {
      \ '_': {
      \   'runner': 'vimproc',
      \   'runner/job/interval': 200,
      \   'runner/vimproc/interval': 200,
      \   'outputter/buffer/split': ':botright 8sp',
      \   'outputter/buffer/close_on_empty': 1,
      \   'hook/time/enable': 1,
      \ },
      \ 'pyrex': {
      \   'command': 'cython',
      \ },
      \ 'perl': {
      \   'command': 'carton',
      \   'cmdopt': '-Ilib',
      \   'exec': '%c exec perl %o %s',
      \ },
      \})

if exists('*ch_close_in')
  let g:quickrun_config._.runner = 'job'
endif

" Terminate the quickrun with <C-c>
nnoremap <expr><silent> <C-c> quickrun#is_running()
      \ ? quickrun#sweep_sessions()
      \ : "\<C-c>"
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
augroup my_neomake
  autocmd! *
  autocmd BufWinEnter  * Neomake
  autocmd BufWritePost * Neomake
augroup END

let g:neomake_error_sign = {
      \ 'text': 'E>',
      \ 'texthl': 'NeomakeErrorSign'
      \}
let g:neomake_warning_sign = {
      \ 'text': 'W>',
      \ 'texthl': 'NeomakeWarningSign'
      \}
let g:neomake_message_sign = {
      \ 'text': 'M>',
      \ 'texthl': 'NeomakeMessageSign'
      \}
let g:neomake_info_sign = {
      \ 'text': 'I>',
      \ 'texthl': 'NeomakeInfoSign'
      \}
'''
# }}}

# Deoplete {{{
[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_source = '''
let g:neocomplete#enable_at_startup = !has('nvim')
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = has('nvim')
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
if = 'executable("npm")'
depends = 'deoplete.nvim'
build = 'npm install -g tern'
on_ft = 'javascript'

[[plugins]]
repo = 'mhartington/deoplete-typescript'
if = 'executable("npm")'
depends = 'deoplete.nvim'
build = 'npm install -g typescript'
on_ft = 'typescript'


# }}}

# Denite {{{
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = [
  'Unite',
  'UniteCursorWord',
]
hook_source = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/unite.vim'))
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = [
  'Denite',
  'DeniteCursorWord',
]
hook_add = '''
nnoremap <silent> <Space><Space> :<C-u>Denite -resume<CR>
nnoremap <silent> <Space>fo :<C-u>Denite file_old<CR>
nnoremap <silent> <Space>ff :<C-u>Denite file_rec<CR>
nnoremap <silent> <Space>dd :<C-u>Denite directory_rec<CR>
nnoremap <silent> <Space>hh :<C-u>Denite help<CR>
nnoremap <silent> <Space>gg :<C-u>Denite grep<CR>
nnoremap <silent> <Space>jj :<C-u>Denite jump_point<CR>
nnoremap <silent> <Space>ss :<C-u>Denite menu:shortcut<CR>
nnoremap <silent> <Space>ww :<C-u>Denite buffer<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/denite.vim'))
'''
# }}}

# Textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap al <Plug>(textobj-line-a)
omap il <Plug>(textobj-line-i)
xmap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ay <Plug>(textobj-syntax-a)
omap iy <Plug>(textobj-syntax-i)
xmap ay <Plug>(textobj-syntax-a)
xmap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
omap aI <Plug>(textobj-indent-same-a)
omap iI <Plug>(textobj-indent-same-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-datetime'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ada <Plug>(textobj-datetime-auto)
omap add <Plug>(textobj-datetime-date)
omap adf <Plug>(textobj-datetime-full)
omap adt <Plug>(textobj-datetime-time)
omap adz <Plug>(textobj-datetime-tz)
omap ida <Plug>(textobj-datetime-auto)
omap idd <Plug>(textobj-datetime-date)
omap idf <Plug>(textobj-datetime-full)
omap idt <Plug>(textobj-datetime-time)
omap idz <Plug>(textobj-datetime-tz)
xmap ada <Plug>(textobj-datetime-auto)
xmap add <Plug>(textobj-datetime-date)
xmap adf <Plug>(textobj-datetime-full)
xmap adt <Plug>(textobj-datetime-time)
xmap adz <Plug>(textobj-datetime-tz)
xmap ida <Plug>(textobj-datetime-auto)
xmap idd <Plug>(textobj-datetime-date)
xmap idf <Plug>(textobj-datetime-full)
xmap idt <Plug>(textobj-datetime-time)
xmap idz <Plug>(textobj-datetime-tz)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ac <Plug>(textobj-comment-a)
omap ic <Plug>(textobj-comment-i)
xmap ac <Plug>(textobj-comment-a)
xmap ic <Plug>(textobj-comment-i)
'''

[[plugins]]
repo = 'saihoooooooo/vim-textobj-space'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a<Space> <Plug>(textobj-space-a)
omap i<Space> <Plug>(textobj-space-i)
xmap a<Space> <Plug>(textobj-space-a)
xmap i<Space> <Plug>(textobj-space-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap az <Plug>(textobj-fold-a)
omap iz <Plug>(textobj-fold-i)
xmap az <Plug>(textobj-fold-a)
xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'lucapette/vim-textobj-underscore'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a_ <Plug>(textobj-underscore-a)
omap i_ <Plug>(textobj-underscore-i)
xmap a_ <Plug>(textobj-underscore-a)
xmap i_ <Plug>(textobj-underscore-i)
'''

[[plugins]]
repo = 'RyanMcG/vim-textobj-dash'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a- <Plug>(textobj-quoted-a)
omap i- <Plug>(textobj-quoted-i)
xmap a- <Plug>(textobj-quoted-a)
xmap i- <Plug>(textobj-quoted-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap au <Plug>(textobj-url-a)
omap iu <Plug>(textobj-url-i)
xmap au <Plug>(textobj-url-a)
xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap aP <Plug>(textobj-parameter-a)
omap iP <Plug>(textobj-parameter-i)
xmap aP <Plug>(textobj-parameter-a)
xmap iP <Plug>(textobj-parameter-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
xmap ab <Plug>(textobj-multiblock-a)
xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
depends = 'vim-textobj-user'
on_map = [
  ['ox', '<Plug>(textobj-wordcolumn-W-i)'],
  ['ox', '<Plug>(textobj-wordcolumn-w-i)'],
  ['ox', '<Plug>(textobj-wordcolumn-W-a)'],
  ['ox', '<Plug>(textobj-wordcolumn-w-a)'],
]
hook_add = '''
omap av <Plug>(textobj-wordcolumn-w-a)
omap iv <Plug>(textobj-wordcolumn-w-i)
xmap av <Plug>(textobj-wordcolumn-w-a)
xmap iv <Plug>(textobj-wordcolumn-w-i)

omap aV <Plug>(textobj-wordcolumn-W-a)
omap iV <Plug>(textobj-wordcolumn-W-i)
xmap aV <Plug>(textobj-wordcolumn-W-a)
xmap iV <Plug>(textobj-wordcolumn-W-i)
'''
# }}}

# Operator {{{
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -r <Plug>(operator-replace)
xmap -r <Plug>(operator-replace)
'''

[[plugins]]
repo = 'sgur/vim-operator-openbrowser'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -o <Plug>(operator-openbrowser)
xmap -o <Plug>(operator-openbrowser)
'''

[[plugins]]
repo = 'rhysd/vim-operator-trailingspace-killer'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -k <Plug>(operator-trailingspace-killer)
xmap -k <Plug>(operator-trailingspace-killer)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
depends = 'vim-operator-user'
hook_add = '''
nmap s <Nop>
xmap s <Nop>
'''

[[plugins]]
repo = 'lambdalisue/vim-operator-breakline'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -b <Plug>(operator-breakline-manual)
nmap -B <Plug>(operator-breakline-textwidth)
xmap -b <Plug>(operator-breakline-manual)
xmap -B <Plug>(operator-breakline-textwidth)
'''

# }}}

# Colorscheme {{{
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'gosukiwi/vim-atom-dark'

[[plugins]]
repo = 'raphamorim/lucario'

[[plugins]]
repo = 'jdkanani/vim-material-theme'
# }}}

# Filetype {{{
[[plugins]]
repo = 'PProvost/vim-ps1'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'zplug/vim-zplug'

[[plugins]]
repo = 'vimperator/vimperator.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'groenewege/vim-less'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'vim-scripts/jQuery'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'leafgarland/typescript-vim'
hook_source = '''
let g:typescript_indent_disable = 1
let g:typescript_compiler_options = '-sourcemap'
'''

[[plugins]]
repo = 'vim-scripts/applescript.vim'

[[plugins]]
repo = 'vim-perl/vim-perl'

[[plugins]]
#repo = 'motemen/xslate-vim'
repo = 'lambdalisue/xslate-vim'

[[plugins]]
repo = 'lambdalisue/vim-cython-syntax'

[[plugins]]
repo = 'hotchpotch/perldoc-vim'
on_ft = 'perl'

[[plugins]]
repo = 'c9s/perlomni.vim'
on_ft = 'perl'

[[plugins]]
repo = 'lambdalisue/vim-riot'

[[plugins]]
if = 'executable("npm")'
repo = 'Quramy/tsuquyomi'
depends = 'vimproc.vim'
build = 'npm install -g typescript'
on_ft = 'typescript'
hook_add = '''
function! s:tsuquyomi_configure() abort
  nmap <buffer> <LocalLeader>d <Plug>(TsuquyomiDefinition)
  nmap <buffer> <LocalLeader>b <Plug>(TsuquyomiGoBack)
  nmap <buffer> <LocalLeader>r <Plug>(TsuquyomiReferences)
  nmap <buffer> <LocalLeader>R <Plug>(TsuquyomiRenameSymbolC)
  if exists('&ballooneval')
    setlocal ballooneval
    setlocal balloonexpr=tsuquyomi#balloonexpr()
  endif
endfunction
autocmd MyAutoCmd FileType typescript call s:tsuquyomi_configure()
'''

# }}}

# Python development {{{
[[plugins]]
repo = 'lambdalisue/pyvenv.vim'
on_cmd = ['PyvenvActivate', 'PyvenvDeactivate']
on_ft = ['python', 'python3']

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python', 'python3']
depends = 'deoplete.nvim'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'python3']
build = 'pip install jedi'
hook_source = '''
let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#show_call_signatures = 0
let g:jedi#completions_enabled = 0

function! s:configure_jedi() abort
  nnoremap <buffer><silent> <Plug>(jedi-goto-definitions) :<C-u>call jedi#goto()<CR>
  nnoremap <buffer><silent> <Plug>(jedi-goto-assignments) :<C-u>call jedi#goto_assignments()<CR>
  nnoremap <buffer><silent> <Plug>(jedi-rename) :<C-u>call jedi#rename()<CR>
  nnoremap <buffer><silent> <Plug>(jedi-usages) :<C-u>call jedi#usages()<CR>
  nnoremap <buffer><silent> <Plug>(jedi-show-documentation) :<C-u>call jedi#show_documentation()<CR>
  nmap <buffer> <LocalLeader>d <Plug>(jedi-goto-definitions)
  nmap <buffer> <LocalLeader>g <Plug>(jedi-goto-assignments)
  nmap <buffer> <LocalLeader>r <Plug>(jedi-rename)
  nmap <buffer> <LocalLeader>u <Plug>(jedi-usages)
  nmap <buffer> K <Plug>(jedi-show-documentation)
endfunction

augroup my_jedi
  autocmd! *
  autocmd FileType python,python3 call s:configure_jedi()
augroup END
'''

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python', 'python3']
build = 'pip install autopep8'
 
[[plugins]]
repo = 'vim-scripts/python_match.vim'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

[[plugins]]
repo = 'tmhedberg/SimpylFold'

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_ft = ['python', 'python3']
hook_source = '''
let g:impsort_method_group = ['alpha', 'length']
let g:impsort_method_module = ['alpha', 'length', 'depth']
let g:impsort_method_imports = ['alpha', 'length']
'''

# }}}

# Vimscript development {{{
[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'Kuniwak/vint'
rtp = ''

[[plugins]]
repo = 'lambdalisue/vim-backslash'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'JunkfileOpen'

[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'vim-jp/vital-complete'
hook_add = '''
autocmd MyAutoCmd FileType vim,vimspec setlocal omnifunc=vital_complete#complete
'''

# External Vital modules {{{
[[plugins]]
repo = 'lambdalisue/vital-Config'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-ArgumentParser'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-ProgressBar'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-Opener'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-Anchor'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-ANSI'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Console'
on_source = 'vital.vim'


[[plugins]]
repo = 'lambdalisue/vital-Vim-Validate'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Window'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Lua-String'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-List-Chunker'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-Dict-Option'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-String-Formatter'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-System-Job'
on_source = 'vital.vim'
# }}}

# }}}

# vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
