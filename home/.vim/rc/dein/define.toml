[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
merged = 0

[[plugins]]
repo = 'vim-jp/vimdoc-ja'


# Requirement -----------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'fuenor/qfixgrep'

[[plugins]]
repo = 'ynkdir/vim-vimlparser'


# Fundemental -----------------------------------------------------------------
[[plugins]]
repo = 'sudo.vim'
on_path = 'sudo:*'
hook_add = 'cnoreabbrev w!! :w sudo:%'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
  function! s:template_call() abort
    " evaluate {CODE} in <%={CODE}=> and replace
    silent %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
    " move the cursor into <+CURSOR+>
    if search('<+CURSOR+>', 'cw')
      silent execute 'normal! "_da>'
    endif
  endfunction
  augroup my-vim-template
    autocmd! *
    autocmd User plugin-template-loaded call s:template_call()
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/vim-diffa'
hook_add = 'nmap <C-l> <Plug>(diffa-C-l)'

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_cmd = 'AnsiEsc'

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = [
    'OverCommandLine',
    'OverCommandLineNoremap',
]
hook_add = '''
  " Use vim-over instead of builtin substitution
  " http://leafcage.hateblo.jp/entry/2013/11/23/212838
  cnoreabbrev <silent><expr>s getcmdtype() ==# ':' && getcmdline() =~# '^s'
        \ ? "OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>"
        \ : 's'
  cnoreabbrev <silent><expr>'<,'>s getcmdtype() ==# ':' && getcmdline() =~# "^'<,'>s"
        \ ? "'<,'>OverCommandLine<CR>s/<C-r>=get([], getchar(0), '')<CR>"
        \ : "'<,'>s"
'''
hook_source = '''
  let g:over_enable_auto_nohlsearch = 1
  let g:over_enable_cmd_window = 1
  if has('multi_byte') && $LANG !=# 'C'
      let g:over_command_line_prompt = 'Â» '
  endif
  let g:over#command_line#search#enable_incsearch = 1
'''

[[plugins]]
repo = 'kana/vim-repeat'
on_map = '<Plug>'
hook_add = '''
  nmap .     <Plug>(repeat-.)
  nmap u     <Plug>(repeat-u)
  nmap U     <Plug>(repeat-U)
  nmap <C-r> <Plug>(repeat-<C-r>)
  nmap g-    <Plug>(repeat-g-)
  nmap g+    <Plug>(repeat-g+)
'''

[[plugins]]
repo = 't9md/vim-quickhl'
depends = 'vim-operator-user'
on_map = [
    '<Plug>',
    '<Plug>(operator-quickhl-manual'
]
hook_add = 'map H <Plug>(operator-quickhl-manual-this-motion)'

[[plugins]]
repo = 'tyru/open-browser.vim'
normalized_name='openbrowser'
on_map = '<Plug>'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'lambdalisue/vim-fullscreen'
on_map = '<Plug>'
hook_add = 'nmap <C-CR> <Plug>(fullscreen-toggle)'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>'
hook_add = '''
  map / <Plug>(incsearch-forward)
  map ? <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n <Plug>(incsearch-nohl-n)
  map N <Plug>(incsearch-nohl-N)

  map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)
  map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)
  map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)
  map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)
  map z*  <Plug>(incsearch-nohl)<Plug>(asterisk-z*)
  map gz* <Plug>(incsearch-nohl)<Plug>(asterisk-gz*)
  map z#  <Plug>(incsearch-nohl)<Plug>(asterisk-z#)
  map gz# <Plug>(incsearch-nohl)<Plug>(asterisk-gz#)
'''
hook_source = 'let g:incsearch#auto_nohlsearch = 1'

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
on_source = 'incsearch.vim'

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
hook_add = '''
  nmap p     <Plug>(yankround-p)
  nmap P     <Plug>(yankround-P)
  nmap gp    <Plug>(yankround-gp)
  nmap gP    <Plug>(yankround-gP)
  nmap <expr><C-p> yankround#is_active()
        \ ? "\<Plug>(yankround-prev)"
        \ : "\<Plug>(my-tab-prev)"
  nmap <expr><C-n> yankround#is_active()
        \ ? "\<Plug>(yankround-next)"
        \ : "\<Plug>(my-tab-next)"
'''
hook_source = 'let g:yankround_use_region_hl = 0'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
depends = 'unite.vim'
on_map = '<Plug>'
on_source = 'unite.vim'
hook_add = '''
  nnoremap <Plug>(my-bookmark) <Nop>
  nmap M <Plug>(my-bookmark)
  vmap M <Plug>(my-bookmark)
  nmap <Plug>(my-bookmark)m <Plug>BookmarkToggle
  nmap <Plug>(my-bookmark)i <Plug>BookmarkAnnotate
  vmap <Plug>(my-bookmark)m <Plug>BookmarkToggle
  vmap <Plug>(my-bookmark)i <Plug>BookmarkAnnotate
  nmap <Plug>(my-bookmark)n <Plug>BookmarkNext
  nmap <Plug>(my-bookmark)p <Plug>BookmarkPrev
  nmap <Plug>(my-bookmark)a <Plug>BookmarkShowAll
  nmap <Plug>(my-bookmark)c <Plug>BookmarkClear
  nmap <Plug>(my-bookmark)x <Plug>BookmarkClearAll

  nmap ]m <Plug>BookmarkNext
  nmap [m <Plug>BookmarkPrev
'''
hook_source = '''
  let g:bookmark_auto_save = 1
  let g:bookmark_save_per_working_dir = 1
  let g:bookmark_highlight_lines = 0
  " use 'long' converter to show actual file path
  call unite#custom_source(
        \ 'vim_bookmarks',
        \ 'converters',
        \ 'converter_vim_bookmarks_long')
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
on_cmd = 'QuickRun'
hook_add = 'nmap <LocalLeader>r <Plug>(quickrun)'
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['_'] = {
        \ 'runner' : 'vimproc',
        \ 'outputter/buffer/split': ':botright 8sp',
        \ 'outputter/buffer/close_on_empty': 1,
        \ 'hook/time/enable': 1,
        \}
  let g:quickrun_config['pyrex'] = {
        \ 'command': 'cython',
        \}
  " Terminate the quickrun with <C-c>
  nnoremap <expr><silent> <C-c> quickrun#is_running()
        \ ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_source = ['unite.vim', 'vimfiler.vim']
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = 'nmap \ :<C-u>Switch<CR>'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'kurkale6ka/vim-swap'
on_map = '<Plug>'
hook_add = '''
  nnoremap <Plug>(my-swap) <Nop>
  vnoremap <Plug>(my-swap) <Nop>
  nmap ~ <Plug>(my-swap)
  vmap ~ <Plug>(my-swap)
  vmap <Plug>(my-swap)~  <Plug>SwapSwapOperands
  vmap <Plug>(my-swap)-  <Plug>SwapSwapPivotOperands
  nmap <Plug>(my-swap)~  <Plug>SwapSwapWithR_WORD
  nmap <Plug>(my-swap)-  <Plug>SwapSwapWithL_WORD
'''
hook_source = 'let g:swap_enable_default_keymaps = 0'

[[plugins]]
repo = 'lambdalisue/vim-pager'
on_cmd = 'PAGER'

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER', 'Man']

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
hook_add = 'nmap <C-w><C-w> <Plug>(choosewin)'

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = 'Findent'
hook_source = '''
  augroup findent
    autocmd!
    autocmd FileType json,javascript    Findent --no-warnings
    autocmd FileType typescript         Findent --no-warnings
    autocmd FileType coffeescript       Findent --no-warnings
    autocmd FileType css,scss,sass,less Findent --no-warnings
    autocmd FileType xml,html           Findent --no-warnings
    autocmd FileType perl,python,ruby   Findent --no-warnings
  augroup END
'''

[[plugins]]
repo = 'osyo-manga/vim-trip'
on_map = '<Plug>'
hook_add = '''
  nmap <C-a> <Plug>(trip-increment)
  nmap <C-x> <Plug>(trip-decrement)
'''

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>'
hook_add = 'nmap <F2> <Plug>(altr-forward)'

[[plugins]]
repo = 'lambdalisue/vim-foldround'
on_map = '<Plug>'
hook_add = '''
  nmap <C-f>f     <Plug>(foldround-forward)
  nmap <C-f><C-f> <Plug>(foldround-forward)
  nmap <C-f>b     <Plug>(foldround-backward)
  nmap <C-f><C-b> <Plug>(foldround-backward)
'''
hook_post_source = '''
  call foldround#register('\.vim$', [
        \ 'syntax', 'marker',
        \])
  call foldround#register('\.vim/.*\.vim$', [
        \ 'syntax', 'marker',
        \])
  call foldround#register('[./]g\?vimrc$', [
        \ 'syntax', 'marker',
        \])
  call foldround#register('\.pl$', [
        \ 'syntax',
        \])
'''

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'JunkfileOpen'

[[plugins]]
repo = 'lambdalisue/vim-protocol'
on_path = '\%(^https\?://\|\.zip$\)'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1
  function! s:incsearch_config(...) abort
    call dein#source('invsearch.vim')
    call dein#source('vim-easymotion')
    return incsearch#util#deepextend(deepcopy({
          \ 'modules': [incsearch#config#easymotion#module({'overwin': 1})],
          \ 'keymap': {
          \   "\<CR>": '<Over>(easymotion)',
          \ },
          \ 'is_expr': 0,
          \}), get(a:, 1, {}))
  endfunction
  nnoremap <nowait><silent><expr> s incsearch#go(<SID>incsearch_config())
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = 'incsearch.vim'
on_source = 'vim-easymotion'

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = '<Plug>'
hook_add = '''
  map f <Plug>(clever-f-f)
  map F <Plug>(clever-f-F)
  map T <Plug>(clever-f-T)
  map t <Plug>(clever-f-t)
'''
hook_source = '''
  let g:clever_f_smart_case = 1
  let g:clever_f_not_overwrite_standard_mappings = 1
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 'itchyny/vim-cursorword'
hook_add = '''
  augroup cursorword-disable
    autocmd! *
    autocmd FileType *
          \ if &buftype =~# '^\%(nofile\|quickfix\|help\)$' |
          \   let b:cursorword = 0 |
          \ endif
  augroup END
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = '<Plug>'
hook_add = '''
  let g:fontzoom_no_default_key_mappings = 1
  nmap <C-ScrollWheelUp>   <Plug>(fontzoom-larger)
  nmap <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
'''

# Colorscheme -----------------------------------------------------------------
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

#[[plugins]]
#repo = 'cocopon/lightline-hybrid.vim'


# Completion ------------------------------------------------------------------
[[plugins]]
if = "has('lua')"
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
on_i = 1
hook_add = '''
  inoremap <silent><expr><C-x><C-x> neocomplete#start_manual_complete()
  inoremap <expr><CR> (pumvisible() ? "\<C-y>" : "") . "\<CR>"
'''
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_fuzzy_completion = 0
  let g:neocomplete#disable_auto_complete = 1
'''

[[plugins]]
if = "has('nvim')"
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_add = '''
  inoremap <silent><expr><C-x><C-x> deoplete#mappings#manual_complete()
  inoremap <expr><CR> (pumvisible() ? "\<C-y>" : "") . "\<CR>"
'''
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#enable_fuzzy_completion = 0
  let g:deoplete#disable_auto_complete = 1
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
#on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
#if = 'executable("look")'
repo = 'ujihisa/neco-look'
#on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
if = 'executable("ghc-mod")'
repo = 'eagletmt/neco-ghc'
on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo = 'hrsh7th/vim-neco-calc'
#on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
if = "has('nvim')"
repo = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_source = 'jedi-vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_source = 'unite.vim'
on_ft = 'snippet'
on_i = 1
hook_add = '''
  if has('nvim')
    imap <expr><C-g> pumvisible()
          \ ? "\<Plug>(neosnippet_expand_or_jump)"
          \ : neosnippet#expandable_or_jumpable()
          \   ? "\<Plug>(neosnippet_expand_or_jump)"
          \   : deoplete#custom#manual_complete('neosnippet')
  elseif has('lua')
    imap <expr><C-g> pumvisible()
          \ ? "\<Plug>(neosnippet_expand_or_jump)"
          \ : neosnippet#expandable_or_jumpable()
          \   ? "\<Plug>(neosnippet_expand_or_jump)"
          \   : neocomplete#start_manual_complete('neosnippet')
  endif
  smap <C-g> <Plug>(neosnippet_expand_or_jump)
  xmap <C-g> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
  let g:neosnippet#snippets_directory = expand('$MYVIM_HOME/snippets')
  let g:neosnippet#enable_snipmate_compatibility = 1

  " for snippet complete marker
  if has('conceal')
    setglobal conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_i = 1
hook_source = '''
  setglobal cmdheight=2
  setglobal completeopt+=menuone
  "set completeopt-=preview
  let g:echodoc_enable_at_startup=1
'''


# Statusline ------------------------------------------------------------------
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = 'lightline-hybrid.vim'
hook_add = '''
  call vimrc#source_path('$MYVIM_HOME/rc/config/lightline.vim')
'''

[[plugins]]
#if = "v:version >= 704"
repo = 'osyo-manga/vim-watchdogs'
depends = ['vimproc.vim', 'vim-quickrun']
hook_post_source = '''
  let g:watchdogs_check_CursorHold_enable = 0
  let g:watchdogs_check_BufWritePost_enable = 0
  let g:watchdogs_check_BufWritePost_enables = {
        \ 'vim': 1,
        \ 'zsh': 1,
        \ 'python': 1,
        \ 'perl': 1,
        \ 'javascript': 1,
        \ 'coffeescript': 1,
        \}
  let g:watchdogs_check_BufWritePost_enable_on_wq = 0

  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config = extend(g:quickrun_config, {
        \ 'watchdogs_checker/_': {
        \   'runner/vimproc/updatetime': 40,
        \   'outputter/quickfix/open_cmd': '',
        \   'hook/qfstatusline_update/enable_exit': 1,
        \   'hook/qfstatusline_update/priority_exit': 4,
        \ }
        \})
  " use flake8 instead of pyflakes
  if executable('flake8')
    let g:quickrun_config['watchdogs_checker/pyflakes'] = {
        \ 'command': 'flake8',
        \}
  endif
  " use vint as a vimlint
  if executable('vint')
    let g:quickrun_config['watchdogs_checker/vint'] = {
          \ 'command': 'vint',
          \ 'exec'   : '%c %o %s:p',
          \}
    let g:quickrun_config['vim/watchdogs_checker'] = {
          \ 'type': 'watchdogs_checker/vint',
          \}
  endif
  call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
#if = "v:version >= 704"
repo = 'KazuakiM/vim-qfstatusline'
depends = 'shabadou.vim'
hook_add = '''
  let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''


# Textobj ---------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ay <Plug>(textobj-syntax-a)
  omap iy <Plug>(textobj-syntax-i)
  xmap ay <Plug>(textobj-syntax-a)
  xmap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ai <Plug>(textobj-indent-a)
  omap ii <Plug>(textobj-indent-i)
  xmap ai <Plug>(textobj-indent-a)
  xmap ii <Plug>(textobj-indent-i)
  omap aI <Plug>(textobj-indent-same-a)
  omap iI <Plug>(textobj-indent-same-i)
  xmap aI <Plug>(textobj-indent-same-a)
  xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-datetime'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ada <Plug>(textobj-datetime-auto)
  omap add <Plug>(textobj-datetime-date)
  omap adf <Plug>(textobj-datetime-full)
  omap adt <Plug>(textobj-datetime-time)
  omap adz <Plug>(textobj-datetime-tz)
  omap ida <Plug>(textobj-datetime-auto)
  omap idd <Plug>(textobj-datetime-date)
  omap idf <Plug>(textobj-datetime-full)
  omap idt <Plug>(textobj-datetime-time)
  omap idz <Plug>(textobj-datetime-tz)
  xmap ada <Plug>(textobj-datetime-auto)
  xmap add <Plug>(textobj-datetime-date)
  xmap adf <Plug>(textobj-datetime-full)
  xmap adt <Plug>(textobj-datetime-time)
  xmap adz <Plug>(textobj-datetime-tz)
  xmap ida <Plug>(textobj-datetime-auto)
  xmap idd <Plug>(textobj-datetime-date)
  xmap idf <Plug>(textobj-datetime-full)
  xmap idt <Plug>(textobj-datetime-time)
  xmap idz <Plug>(textobj-datetime-tz)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ac <Plug>(textobj-comment-a)
  omap ic <Plug>(textobj-comment-i)
  xmap ac <Plug>(textobj-comment-a)
  xmap ic <Plug>(textobj-comment-i)
'''

[[plugins]]
repo = 'saihoooooooo/vim-textobj-space'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap aS <Plug>(textobj-space-a)
  omap iS <Plug>(textobj-space-i)
  xmap aS <Plug>(textobj-space-a)
  xmap iS <Plug>(textobj-space-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap az <Plug>(textobj-fold-a)
  omap iz <Plug>(textobj-fold-i)
  xmap az <Plug>(textobj-fold-a)
  xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-underscore'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  " NOTE:
  " Checkout tyru version!
  omap a_ <Plug>(textobj-underscore-a)
  omap i_ <Plug>(textobj-underscore-i)
  xmap a_ <Plug>(textobj-underscore-a)
  xmap i_ <Plug>(textobj-underscore-i)
'''

[[plugins]]
repo = 'RyanMcG/vim-textobj-dash'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  " NOTE:
  " Send PR to add document
  omap a- <Plug>(textobj-dash-a)
  omap i- <Plug>(textobj-dash-i)
  xmap a- <Plug>(textobj-dash-a)
  xmap i- <Plug>(textobj-dash-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  " NOTE:
  " Send PR to add document
  omap au <Plug>(textobj-url-a)
  omap iu <Plug>(textobj-url-i)
  xmap au <Plug>(textobj-url-a)
  xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  " NOTE:
  " Send PR to add document
  omap aP <Plug>(textobj-parameter-a)
  omap iP <Plug>(textobj-parameter-i)
  xmap aP <Plug>(textobj-parameter-a)
  xmap iP <Plug>(textobj-parameter-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  " NOTE:
  " Send PR about <Plug> mapping?
  omap av <Plug>(textobj-word-column-a)
  omap iv <Plug>(textobj-word-column-i)
  xmap av <Plug>(textobj-word-column-a)
  xmap iv <Plug>(textobj-word-column-i)

  omap aV <Plug>(textobj-word-column-A)
  omap iV <Plug>(textobj-word-column-I)
  xmap aV <Plug>(textobj-word-column-A)
  xmap iV <Plug>(textobj-word-column-I)
'''

[[plugins]]
#if = "executable('python')"
repo = 'bps/vim-textobj-python'
depends = 'vim-textobj-user'
#on_ft = ['python', 'python3']
hook_add = '''
    function! s:textobj_python_settings() abort
      xmap <buffer> aF <Plug>(textobj-python-function-a)
      omap <buffer> iF <Plug>(textobj-python-function-i)
      xmap <buffer> aC <Plug>(textobj-python-class-a)
      omap <buffer> iC <Plug>(textobj-python-class-i)
    endfunction
    augroup my-vim-textobj-python
      autocmd! *
      autocmd FileType python call s:textobj_python_settings()
    augroup END
'''


# Operator --------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap R <Plug>(operator-replace)
  xmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'sgur/vim-operator-openbrowser'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap -o <Plug>(operator-openbrowser)
  xmap -o <Plug>(operator-openbrowser)
'''

[[plugins]]
repo = 'rhysd/vim-operator-trailingspace-killer'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap -k <Plug>(operator-trailingspace-killer)
  xmap -k <Plug>(operator-trailingspace-killer)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap Sa <Plug>(operator-surround-append)
  nmap Sd <Plug>(operator-surround-delete)
  nmap Sr <Plug>(operator-surround-replace)
  xmap Sa <Plug>(operator-surround-append)
  xmap Sd <Plug>(operator-surround-delete)
  xmap Sr <Plug>(operator-surround-replace)

  nmap Sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap Srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
  xmap Sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  xmap Srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'lambdalisue/vim-operator-breakline'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap -b <Plug>(operator-breakline-manual)
  nmap -B <Plug>(operator-breakline-textwidth)
  xmap -b <Plug>(operator-breakline-manual)
  xmap -B <Plug>(operator-breakline-textwidth)
'''

[[plugins]]
repo = 'chikatoike/concealedyank.vim'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>(operator-concealedyank)']]
hook_add = '''
  nmap Y <Plug>(operator-concealedyank)
  xmap Y <Plug>(operator-concealedyank)
'''


# Interface -------------------------------------------------------------------
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
lazy = 1
hook_source = '''
  let g:ctrlp_map = '<Nop>'
  let g:ctrlp_cmd = 'CtrlP'
  " Guess VCS root directory as well
  let g:ctrlp_working_path_mode = 'ra'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = [
    'Unite',
    'UniteWithCursorWord',
    'UniteBookmarkAdd',
]
hook_add = '''
  nnoremap <Plug>(my-unite) <Nop>
  nmap <Space> <Plug>(my-unite)
  vmap <Space> <Plug>(my-unite)

  nnoremap <silent> <Plug>(my-unite)<Space>
        \ :<C-u>UniteResume -no-start-insert<CR>
  nnoremap <silent> <Plug>(my-unite)w
        \ :<C-u>Unite buffer<CR>
  nnoremap <silent> <Plug>(my-unite)k
        \ :<C-u>Unite bookmark<CR>
  nnoremap <silent> <Plug>(my-unite)l :<C-u>Unite line
        \ -buffer-name=search<CR>
  nnoremap <silent> <Plug>(my-unite)h :<C-u>Unite help
        \ -buffer-name=search<CR>
  nnoremap <silent> <Plug>(my-unite)mp
        \ :<C-u>Unite map
        \ -buffer-name=search<CR>
  vnoremap <silent> <Plug>(my-unite)l
        \ :<C-u>UniteWithCursorWord line
        \ -buffer-name=search<CR>
  vnoremap <silent> <Plug>(my-unite)h
        \ :<C-u>UniteWithCursorWord help
        \ -buffer-name=search<CR>

  " unite-menu
  nnoremap <silent> <Plug>(my-unite)s
        \ :<C-u>Unite menu:shortcut<CR>

  " unite-file
  nnoremap <Plug>(my-unite-file) <Nop>
  nmap <Plug>(my-unite)f <Plug>(my-unite-file)
  nnoremap <silent> <Plug>(my-unite-file)f
        \ :<C-u>call <SID>unite_smart_file()<CR>
  nnoremap <silent> <Plug>(my-unite-file)i
        \ :<C-u>Unite file<CR>
  nnoremap <silent> <Plug>(my-unite-file)m
        \ :<C-u>Unite file_mru<CR>
  nnoremap <silent> <Plug>(my-unite-file)r
        \ :<C-u>Unite file_rec/async<CR>
  nnoremap <silent> <Plug>(my-unite-file)g
        \ :<C-u>Unite file_rec/git<CR>
  function! s:unite_smart_file()
    if s:is_git_available()
      Unite file_rec/git
    else
      Unite file_rec/async
    endif
  endfunction

  " unite-directory
  nnoremap <Plug>(my-unite-directory) <Nop>
  nmap <Plug>(my-unite)d <Plug>(my-unite-directory)
  nnoremap <silent> <Plug>(my-unite-directory)d
        \ :<C-u>Unite directory_rec/async<CR>
  nnoremap <silent> <Plug>(my-unite-directory)i
        \ :<C-u>Unite directory<CR>
  nnoremap <silent> <Plug>(my-unite-directory)m
        \ :<C-u>Unite directory_mru<CR>
  nnoremap <silent> <Plug>(my-unite-directory)r
        \ :<C-u>Unite directory_rec/async<CR>

  " unite-qf
  nnoremap <Plug>(my-unite-qf) <Nop>
  nmap <Plug>(my-unite)q <Plug>(my-unite-qf)
  nnoremap <silent> <Plug>(my-unite-qf)q
        \ :<C-u>Unite quickfix location_list
        \ -buffer-name=search<CR>
  nnoremap <silent> <Plug>(my-unite-qf)f
        \ :<C-u>Unite quickfix
        \ -buffer-name=search<CR>
  nnoremap <silent> <Plug>(my-unite-qf)l
        \ :<C-u>Unite location_list
        \ -buffer-name=search<CR>

  " unite-grep
  nnoremap <Plug>(my-unite-grep) <Nop>
  nmap <Plug>(my-unite)g <Plug>(my-unite-grep)
  vmap <Plug>(my-unite)g <Plug>(my-unite-grep)
  nnoremap <silent> <Plug>(my-unite-grep)*
        \ :<C-u>UniteWithCursorWord grep:.
        \ -buffer-name=search
        \ -no-empty<CR>
  vnoremap <silent> <Plug>(my-unite-grep)*
        \ :UniteWithCursorWord grep:.
        \ -buffer-name=search
        \ -no-empty<CR>
  nnoremap <silent> <Plug>(my-unite-grep)g
        \ :<C-u>Unite grep:.
        \ -buffer-name=search
        \ -no-empty<CR>
  vnoremap <silent> <Plug>(my-unite-grep)g
        \ :Unite grep:.
        \ -buffer-name=search
        \ -no-empty<CR>
  nnoremap <silent> <Plug>(my-unite-grep)i
        \ :<C-u>Unite grep/git:/
        \ -buffer-name=search
        \ -no-empty<CR>
  vnoremap <silent> <Plug>(my-unite-grep)i
        \ :Unite grep/git:/
        \ -buffer-name=search
        \ -no-empty<CR>

  " unite-git
  nnoremap <Plug>(my-unite-git) <Nop>
  nmap <Plug>(my-unite)i <Plug>(my-unite-git)
  nnoremap <silent> <Plug>(my-unite-git)i
        \ :<C-u>Unite giti/branch_recent<CR>
  nnoremap <silent> <Plug>(my-unite-git)b
        \ :<C-u>Unite giti/branch_recent giti/branch_all<CR>
  nnoremap <silent> <Plug>(my-unite-git)r
        \ :<C-u>Unite giti/remote<CR>

  " unite-gista
  nnoremap <silent> <Plug>(my-unite-git)t
        \ :<C-u>Unite gista:lambdalisue<CR>

  " unite-ref
  nnoremap <Plug>(my-unite-ref) <Nop>
  nmap <Plug>(my-unite)r <Plug>(my-unite-ref)
  nnoremap <silent> <Plug>(my-unite-ref)r
              \ :<C-u>call <SID>unite_smart_ref()<CR>
  nnoremap <silent> <Plug>(my-unite-ref)p
              \ :<C-u>Unite ref/pydoc<CR>
  nnoremap <silent> <Plug>(my-unite-ref)l
              \ :<C-u>Unite perldoc<CR>
  nnoremap <silent> <Plug>(my-unite-ref)m
              \ :<C-u>Unite ref/man<CR>
  nnoremap <silent> <Plug>(my-unite-ref)j
              \ :<C-u>Unite ref/javascript<CR>
  nnoremap <silent> <Plug>(my-unite-ref)q
              \ :<C-u>Unite ref/jquery<CR>
  nnoremap <silent> <Plug>(my-unite-ref)k
              \ :<C-u>Unite ref/kotobank<CR>
  nnoremap <silent> <Plug>(my-unite-ref)w
              \ :<C-u>Unite ref/wikipedia<CR>
  function! s:unite_smart_ref()
    if &filetype =~# 'perl'
      Unite perldoc
    elseif &filetype =~# 'python'
      Unite ref/pydoc
    elseif &filetype =~# 'ruby'
      Unite ref/refe
    elseif &filetype =~# 'javascript'
      Unite ref/javascript
    elseif &filetype =~# 'vim'
      Unite help
    else
      Unite ref/man
    endif
  endfunction

  " unite-linephrase
  nnoremap <silent> <Plug>(my-unite)p
        \ :<C-u>Unite linephrase
        \ -no-quit -keep-focus -no-start-insert
        \ -buffer-name=search<CR>

  " unite-outline
  nnoremap <silent> <Leader>o
        \ :<C-u>Unite outline
        \ -no-quit -keep-focus -no-start-insert
        \ -vertical -direction=botright -winwidth=30<CR>

  " vim-bookmarks
  nnoremap <silent> <Plug>(my-unite)mm
        \ :<C-u>Unite vim_bookmarks
        \ -no-quit -keep-focus -no-start-insert
        \ -buffer-name=search<CR>

'''
hook_source = '''
  call vimrc#source_path('$MYVIM_HOME/rc/config/unite.vim')
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_cmd = [
    'VimShell',
    'VimShellTab',
    'VimShellPop',
]
hook_source = '''
  call vimrc#source_path('$MYVIM_HOME/rc/config/vimshell.vim')
'''
hook_post_source = '''
  highlight! vimshellError gui=NONE cterm=NONE guifg='#cc6666' ctermfg=9
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = [
    'VimFiler',
    'VimFilerExplorer',
]
on_path = '\h\w*:'
hook_add = '''
  nnoremap <Plug>(my-vimfiler) <Nop>
  nmap <Leader>e <Plug>(my-vimfiler)
  nnoremap <silent> <Plug>(my-vimfiler)e :<C-u>VimFilerExplorer<CR>
  nnoremap <silent> <Plug>(my-vimfiler)E :<C-u>VimFiler<CR>
'''
hook_source = '''
  call vimrc#source_path('$MYVIM_HOME/rc/config/vimfiler.vim')
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
  nnoremap <Plug>(my-undotree) <Nop>
  nmap <Leader>u <Plug>(my-undotree)
  nnoremap <silent> <Plug>(my-undotree) :<C-u>UndotreeToggle<CR>
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = 'Ref'
hook_add = '''
  let g:ref_open = 'vsplit'
  function! s:ref_configure() abort
    nmap <buffer><silent> <C-p> <Plug>(ref-back)
    nmap <buffer><silent> <C-n> <Plug>(ref-forward)
  endfunction
  augroup my-vim-ref
    autocmd! *
    autocmd FileType ref call s:ref_configure()
  augroup END
'''

[[plugins]]
repo = 'mojako/ref-sources.vim'
#on_source = 'vim-ref'
hook_source = '''
  let g:ref_jquery_doc_path     = expand('$MYVIM_HOME/bundle/jqapi')
  let g:ref_javascript_doc_path = expand('$MYVIM_HOME/bundle/jsref/htdocs')
  let g:ref_auto_resize = 1
  let g:ref_wikipedia_lang = ['ja', 'en']
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = [
    'Tagbar',
    'TagbarOpen',
    'TagbarToggle',
]
hook_add = '''
  nnoremap <Plug>(my-tagbar) <Nop>
  nmap <Leader>t <Plug>(my-tagbar)
  nnoremap <silent> <Plug>(my-tagbar) :<C-u>TagbarToggle<CR>
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
depends = ['unite.vim', 'qfixgrep']
on_cmd = [
    'MemoNew',
    'MemoList',
    'MemoGrep',
]
hook_add = '''
  nnoremap <Plug>(my-memolist) <Nop>
  nmap <Leader>m <Plug>(my-memolist)
  nnoremap <silent> <Plug>(my-memolist)m :<C-u>MemoList<CR>
  nnoremap <silent> <Plug>(my-memolist)n :<C-u>MemoNew<CR>
  nnoremap <silent> <Plug>(my-memolist)g :<C-u>MemoGrep<CR>
'''
hook_source = '''
  let g:memolist_qfixgrep = 1
  let g:memolist_path = expand('~/Dropbox/Apps/Byword/')
  let g:memolist_unite = 1
  let g:memolist_unite_option = '-no-start-insert'
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_cmd = 'Tabularize'

[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = [
    'RengBang',
    'RengBangUsePrev',
    'RengBangConfirm',
]
hook_add = '''
  nnoremap <Plug>(my-rengbang) <Nop>
  vmap <C-a> <Plug>(my-rengbang)
  vnoremap <Plug>(my-rengbang)a :<C-u>'<,'>RengBang<CR>
  vnoremap <Plug>(my-rengbang)A :<C-u>'<,'>RengBangUsePrev<CR>
  vnoremap <Plug>(my-rengbang)c :<C-u>'<,'>RengBangConfirm<CR>
  map <Plug>(my-operator)rr <Plug>(operator-rengbang)
  map <Plug>(my-operator)rR <Plug>(operator-rengbang-useprev)
'''
hook_source = '''
  let g:rengbang_default_pattern  = '\(\d\+\)'
  let g:rengbang_default_start    = 0
  let g:rengbang_default_step     = 1
  let g:rengbang_default_usefirst = 0
  let g:rengbang_default_confirm_sequence = [
        \ 'pattern',
        \ 'start',
        \ 'step',
        \ 'usefirst',
        \ 'format',
        \]
'''

[[plugins]]
# Note:
#   This plugin is quite heavy and it add BufEnter autocmd to visualize
#   color thus should not be autoloaded with filetype or so on.
repo = 'lilydjwg/colorizer'
on_map = '<Plug>'
on_cmd = [
    'ColorHighlight',
    'ColorToggle',
]
hook_source = 'let g:colorizer_nomap = 1'

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_add = '''
  nnoremap <Plug>(my-calendar) <Nop>
  nmap <Leader>c <Plug>(my-calendar)
  nnoremap <silent> <Plug>(my-calendar)c :<C-u>Calendar<CR>
  nnoremap <silent> <Plug>(my-calendar)t :<C-u>Calendar -view=clock<CR>
'''
hook_source = '''
  let g:calendar_frame = 'default'
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''


# Unite sources ---------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neossh.vim'

[[plugins]]
repo = 'Shougo/unite-help'

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'

[[plugins]]
repo = 'ujihisa/unite-font'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'rhysd/unite-codic.vim'

[[plugins]]
repo = 'pasela/unite-webcolorname'

[[plugins]]
repo = 'lambdalisue/unite-linephrase'
hook_source = '''
  let g:linephrase#directory = expand('~/Dropbox/Apps/Vim/linephrase')
'''

[[plugins]]
repo = 'joker1007/unite-pull-request'

[[plugins]]
repo = 'dameninngenn/unite-perldoc'

[[plugins]]
repo = 'naquad/unite-digraphs'

[[plugins]]
#if = "executable('git')"
repo = 'kmnk/vim-unite-giti'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'rafi/vim-unite-issue'

[[plugins]]
repo = 'lambdalisue/vim-gista-unite'


# Version controller system ---------------------------------------------------
[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = 'Gita'
hook_add = '''
  nnoremap <Plug>(my-gita) <Nop>
  nmap <Leader>a <Plug>(my-gita)
  nnoremap <silent> <Plug>(my-gita)a :<C-u>Gita status  --ignore-submodules<CR>
  nnoremap <silent> <Plug>(my-gita)b :<C-u>Gita branch --all<CR>
  nnoremap <silent> <Plug>(my-gita)g :<C-u>Gita grep<CR>
  nnoremap <silent> <Plug>(my-gita)d :<C-u>Gita diff-ls --ignore-submodules origin/HEAD...<CR>
  nnoremap <silent> <Plug>(my-gita)l :<C-u>Gita ls-files<CR>
  augroup gita_qfreplace
    autocmd! *
    autocmd User GitaActionCalledPost:quickfix:quickfix call qfreplace#start('')
  augroup END
'''
hook_source = '''
  let g:gita#command#browse#extra_translation_patterns = {
        \ 'ghe.admin.h': [
        \   [
        \     '\vhttps?://(%domain)/(.{-})/(.{-})%(\.git)?$',
        \     '\vgit://(%domain)/(.{-})/(.{-})%(\.git)?$',
        \     '\vgit\@(%domain):(.{-})/(.{-})%(\.git)?$',
        \     '\vssh://git\@(%domain)/(.{-})/(.{-})%(\.git)?$',
        \   ], {
        \     '_':     'https://\1/\2/\3/blob/%c1/%pt%{#L|}ls%{-L|}le',
        \     'exact': 'https://\1/\2/\3/blob/%r1/%pt%{#L|}ls%{-L|}le',
        \     'blame': 'https://\1/\2/\3/blame/%c1/%pt%{#L|}ls%{-L|}le',
        \   },
        \ ],
        \}
'''

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = '''
  let g:gista#client#default_username = 'lambdalisue'
'''

[[plugins]]
repo = 'lambdalisue/vim-gista-ctrlp'
depends = ['vim-gista', 'ctrlp.vim']
on_cmd = 'CtrlPGista'
on_func = 'ctrlp#gista#'

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
on_source = 'unite.vim'
hook_add = '''
  " add extra key-mappings
  function! s:my_agit_setting() abort
    nmap <buffer> ch <Plug>(agit-git-cherry-pick)
    nmap <buffer> Rv <Plug>(agit-git-revert)
  endfunction
  augroup my-agit-vim
    autocmd! *
    autocmd FileType agit call s:my_agit_setting()
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [
    'Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge',
    'Gpull', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog',
    'Gllog', 'Gedit', 'Gsplit', 'Gvsplit', 'Gtabedit', 'Gpedit',
    'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff',
    'Gmove', 'Gremove', 'Gblame', 'Gbrowse',
]


# Syntax ----------------------------------------------------------------------
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
#on_ft = ['css', 'sass', 'scss', 'less', 'html']

[[plugins]]
repo = 'othree/html5.vim'
#on_ft = 'html'

[[plugins]]
repo = 'groenewege/vim-less'
#on_ft = 'less'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
#on_ft = ['sass', 'scss']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
#on_ft = 'coffeescript'

[[plugins]]
repo = 'elzr/vim-json'
#on_ft = 'json'

[[plugins]]
repo = 'jQuery'
#on_ft = ['javascript', 'coffeescript', 'typescript']

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
#on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'jason0x43/vim-js-indent'
#on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'leafgarland/typescript-vim'
#on_ft = 'typescript'
hook_source = '''
  let g:typescript_indent_disable = 1
  let g:typescript_compiler_options = '-sourcemap'
'''

[[plugins]]
repo = 'thinca/vim-ft-help_fold'
#on_ft = 'help'

[[plugins]]
repo = 'vim-scripts/applescript.vim'
#on_ft = 'applescript'

[[plugins]]
repo = 'cespare/vim-toml'
#on_ft = 'toml'

[[plugins]]
repo = 'vim-scripts/indentpython.vim'
#on_ft = ['python', 'python3']

[[plugins]]
repo = 'vim-scripts/python_match.vim'
#on_ft = ['python', 'python3']

[[plugins]]
repo = 'tmhedberg/SimpylFold'
#on_ft = ['python', 'python3']

[[plugins]]
repo = 'vim-perl/vim-perl'
#on_ft = 'perl'

[[plugins]]
repo = 'lambdalisue/vim-cython-syntax'
merge = 0


# Specific --------------------------------------------------------------------
[[plugins]]
if = "executable('latexmk')"
repo = 'LaTeX-Box-Team/LaTeX-Box'
on_cmd = 'Latexmk',
on_ft = ['tex', 'plaintex']
hook_source = '''
  let g:LatexBox_latexmk_async = 1
  let g:LatexBox_latexmk_preview_continuously = 1
  let g:LatexBox_latexmk_options = '-pdfdvi'
  let g:LatexBox_build_dir = 'build'
  let g:LatexBox_Folding = 1
  let g:LatexBox_quickfix = 2
  let g:LatexBox_ignore_warnings = [
        \ 'Underfull', 'Overfull', 'specifier changed to',
        \ 'Module luatexbase-mcb warning: several functions in ',
        \ 'xparse/redefine-command',
        \ 'luatexja-preset warning: "scale"',
        \ 'Unsupported document class',
        \ '\setcatcoderange is deprecated',
        \ 'LaTeX Warning: You have requested document class',
        \ 'LaTeX Font Warning: Font shape',
        \ 'Package typearea Warning: Bad type area settings!',
        \ 'LaTeX Font Warning: Some font shapes were not available, defaults substituted.'
        \ ]
  " neocomplete should not used for tex
  let g:neocomplete#force_omni_input_patterns =
        \ get(g:, 'neocomplete#force_omni_input_patterns', {})
  let g:neocomplete#force_omni_input_patterns.tex =
        \ '\v(\\\a*(subref|ref|textcite|autocite|cite)\a*\{([^}]*,)?|\$)'

  function! s:latexbox_configure() abort
    imap <buffer> [[     \begin{
    imap <buffer> ]]     <Plug>LatexCloseCurEnv
    nmap <buffer> <F5>   <Plug>LatexChangeEnv
    vmap <buffer> <F7>   <Plug>LatexWrapSelection
    vmap <buffer> <S-F7> <Plug>LatexEnvWrapSelection
    imap <buffer> ((     \eqref{
  endfunction
  augroup my-latex-box
    autocmd! *
    autocmd FileType tex,latex,plaintex call s:latexbox_configure()
  augroup END
'''

[[plugins]]
#if = "executable('pip')"
build = 'pip install -q --disable-pip-version-check autopep8'
repo = 'tell-k/vim-autopep8'
#on_ft = ['python', 'python3']
hook_source = 'let g:autopep8_disable_show_diff = 1'

[[plugins]]
if = "executable('git')"
build = 'git submodule update --init'
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'python3']
on_source = 'vim-pyenv'
hook_source = '''
  let g:jedi#auto_initialization = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#popup_on_dot = 0
  let g:jedi#popup_select_first = 0
  let g:jedi#auto_close_doc = 1
  let g:jedi#show_call_signatures = 1
  let g:jedi#show_call_signatures_delay = 500
  let g:jedi#use_tabs_not_buffers = 0
  let g:jedi#squelch_py_warning = 1
  let g:jedi#completions_enabled = 1
  let g:jedi#use_splits_not_buffers = ""
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#use_tag_stack = 1

  function! s:jedi_vim_configure() abort
    setlocal omnifunc=jedi#completions
    nmap <buffer> <LocalLeader>g <Plug>(jedi-goto-assignments)
    nmap <buffer> <LocalLeader>d <Plug>(jedi-goto-definitions)
    nmap <buffer> <LocalLeader>R <Plug>(jedi-rename)
    nmap <buffer> <LocalLeader>n <Plug>(jedi-usage)
    nmap <buffer> K <Plug>(jedi-show-documentation)
    if g:jedi#show_call_signatures &&  has('conceal')
      call jedi#configure_call_signatures()
    endif
  endfunction

  augroup my-jedi-vim
    autocmd! *
    autocmd FileType python call s:jedi_vim_configure()
  augroup END

  " jedi does not provide <Plug>(jedi-X) mappings
  nnoremap <silent> <Plug>(jedi-goto-assignments)
        \ :<C-u>call jedi#goto_assignments()<CR>
  nnoremap <silent> <Plug>(jedi-goto-definitions)
        \ :<C-u>call jedi#goto_definitions()<CR>
  nnoremap <silent> <Plug>(jedi-show-documentation)
        \ :<C-u>call jedi#show_documentation()<CR>
  nnoremap <silent> <Plug>(jedi-rename)
        \ :<C-u>call jedi#rename()<CR>
  nnoremap <silent> <Plug>(jedi-usages)
        \ :<C-u>call jedi#usages()<CR>
'''

[[plugins]]
if = "executable('pyenv')"
repo = 'lambdalisue/vim-pyenv'
on_ft = ['python', 'python3']
on_cmd = 'PyenvActivate'
hook_post_source = '''
  if jedi#init_python()
    function! s:jedi_auto_force_py_version() abort
      let major_version = pyenv#python#get_internal_major_version()
      call jedi#force_py_version(major_version)
    endfunction
    augroup my-vim-pyenv
      autocmd! *
      autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
      autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
    augroup END
  endif
'''

[[plugins]]
repo = 'hotchpotch/perldoc-vim'
on_ft = 'perl'

[[plugins]]
repo = 'c9s/perlomni.vim'
#on_ft = 'perl'

[[plugins]]
if = "v:version >= 704 && executable('npm')"
build = 'npm install -g typescript'
repo = 'Quramy/tsuquyomi'
depends = 'vimproc.vim'
on_ft = 'typescript'
hook_add = '''
  function! s:tsuquyomi_configure() abort
    nmap <buffer> <LocalLeader>d <Plug>(TsuquyomiDefinition)
    nmap <buffer> <LocalLeader>b <Plug>(TsuquyomiGoBack)
    nmap <buffer> <LocalLeader>r <Plug>(TsuquyomiReferences)
    nmap <buffer> <LocalLeader>R <Plug>(TsuquyomiRenameSymbolC)
    if exists('&ballooneval')
      setlocal ballooneval
      setlocal balloonexpr=tsuquyomi#balloonexpr()
    endif
  endfunction
  augroup my-tsuquyomi
    autocmd! *
    autocmd FileType typescript call s:tsuquyomi_configure()
  augroup END
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = 'pandoc'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_cmd = 'PrevimOpen'
hook_source = 'let g:previm_show_header = 0'

[[plugins]]
if = "executable('cargo')"
repo = 'rust-lang/rust.vim'
build = 'cargo install rustfmt'
hook_add = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command = expand('~/.cargo/bin/rustfmt')
'''
on_ft = 'rust'

[[plugins]]
if = "executable('cargo')"
repo = 'phildawes/racer'
build = 'cargo build --release'
hook_add = '''
  let g:racer_cmd = expand('~/.cargo/bin/racer')
  let $RUST_SRC_PATH = expand('~/Code/github.com/rust-lang/rust/src')
'''
on_ft = 'rust'

[[plugins]]
if = "executable('cargo')"
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'


# Misc ------------------------------------------------------------------------
[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'


# Vimscript development -------------------------------------------------------
[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'lambdalisue/vital-ArgumentParser'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-ProgressBar'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-Anchor'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Prompt'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Validate'
on_source = 'vital.vim'

[[plugins]]
repo = 'haya14busa/vital-vimlcompiler'
on_source = 'vital.vim'

[[plugins]]
repo = 'haya14busa/vital-power-assert'
depends = 'vital-vimlcompiler'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd  = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'syngan/vim-vimlint'
depends = 'vim-vimlparser'

[[plugins]]
repo = 'LeafCage/laptime.vim'
#lazy = 1

[[plugins]]
# non vim plugin
repo = 'thinca/vim-themis'

[[plugins]]
# non vim plugin
repo = 'Kuniwak/vint'

[[plugins]]
repo = 'Shougo/neobundle.vim'
lazy = 1
