# Fundemental {{{
[[plugins]]
repo = 'Shougo/dein.vim'
rtp  = ''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]]
repo = 'lambdalisue/vim-protocol'
on_path = '\%(^https\?://\|\.zip$\)'

[[plugins]]
repo = 'lambdalisue/vim-marron'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <Leader><Leader>r <Plug>(marron-reload-vimrc)<Plug>(marron-reload-gvimrc)
'''

[[plugins]]
repo = 'sudo.vim'
on_path = 'sudo:*'
hook_add = 'cnoreabbrev w!! :w sudo:%'

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER', 'Man']
hook_add = '''
let g:loaded_man = 1  " Disable Neovim builtin 'Man'
'''

[[plugins]]
repo = 'lambdalisue/vim-fullscreen'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <C-CR> <Plug>(fullscreen-toggle)
'''

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = [['n', '<Plug>']]
on_cmd = 'Fontzoom'
hook_add = '''
let g:fontzoom_no_default_key_mappings = 1
nmap <C-ScrollWheelUp>   <Plug>(fontzoom-larger)
nmap <C-ScrollWheelDown> <Plug>(fontzoom-smaller)
nmap <C-S-Up>            <Plug>(fontzoom-larger)
nmap <C-S-Down>          <Plug>(fontzoom-smaller)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
normalized_name='openbrowser'
on_map = [['nx', '<Plug>']]
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping
nmap gx <Plug>(openbrowser-smart-search)
xmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'kana/vim-repeat'
on_map = '<Plug>'
hook_add = '''
nmap .     <Plug>(repeat-.)
nmap u     <Plug>(repeat-u)
nmap U     <Plug>(repeat-U)
nmap <C-r> <Plug>(repeat-<C-r>)
nmap g-    <Plug>(repeat-g-)
nmap g+    <Plug>(repeat-g+)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
'''


# }}}

# Dependency {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
merged = 0

# }}}

# Nyaovim {{{
[[plugins]]
repo = 'rhysd/nyaovim-markdown-preview'

[[plugins]]
repo = 'rhysd/nyaovim-popup-tooltip'

# }}}

# App {{{
[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = 'Goyo'

[[plugins]]
repo = 'junegunn/limelight.vim'
on_cmd = 'Limelight'

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>'
hook_add = 'nmap <F2> <Plug>(altr-forward)'
hook_post_source = '''
call altr#define('autoload/%.vim', 'test/%.vimspec', 'plugin/%.vim', 'doc/%.txt')
call altr#define('lib/%.pm', 't/%.t', 'template/%.tx')
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_add = '''
let g:calendar_frame = 'default'
let g:calendar_first_day = 'sunday'
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
'''

[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = 'Gita'
hook_add = '''
nnoremap <Plug>(my-gita) <Nop>
nmap <Leader>a <Plug>(my-gita)
nnoremap <silent> <Plug>(my-gita)a :<C-u>Gita status -u --ignore-submodules <CR>
nnoremap <silent> <Plug>(my-gita)b :<C-u>Gita branch --all<CR>
nnoremap <silent> <Plug>(my-gita)g :<C-u>Gita grep<CR>
nnoremap <silent> <Plug>(my-gita)d :<C-u>Gita diff-ls --ignore-submodules origin/HEAD...<CR>
nnoremap <silent> <Plug>(my-gita)l :<C-u>Gita ls-files<CR>
autocmd MyAutoCmd User GitaActionCalledPost:quickfix:quickfix call qfreplace#start('')
'''
hook_source = '''
let g:gita#command#browse#extra_translation_patterns = {
      \ 'ghe.admin.h': [
      \   [
      \     '\vhttps?://(%domain)/(.{-})/(.{-})%(\.git)?$',
      \     '\vgit://(%domain)/(.{-})/(.{-})%(\.git)?$',
      \     '\vgit\@(%domain):(.{-})/(.{-})%(\.git)?$',
      \     '\vssh://git\@(%domain)/(.{-})/(.{-})%(\.git)?$',
      \   ], {
      \     '_':     'https://\1/\2/\3/blob/%c1/%pt%{#L|}ls%{-L|}le',
      \     'exact': 'https://\1/\2/\3/blob/%r1/%pt%{#L|}ls%{-L|}le',
      \     'blame': 'https://\1/\2/\3/blame/%c1/%pt%{#L|}ls%{-L|}le',
      \   },
      \ ],
      \}
'''

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
on_source = 'unite.vim'
hook_add = '''
" add extra key-mappings
function! s:my_agit_setting() abort
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
autocmd MyAutoCmd FileType agit call s:my_agit_setting()
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [
  'Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge',
  'Gpull', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog',
  'Gllog', 'Gedit', 'Gsplit', 'Gvsplit', 'Gtabedit', 'Gpedit',
  'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff',
  'Gmove', 'Gremove', 'Gblame', 'Gbrowse',
]

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = '''
let g:gista#client#default_username = 'lambdalisue'
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
lazy = 1
hook_source = '''
let g:ctrlp_map = '<Nop>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
'''


[[plugins]]
repo = 'Shougo/vimshell.vim'
on_cmd = [
  'VimShell',
  'VimShellTab',
  'VimShellPop',
]
hook_source = '''
highlight! vimshellError gui=NONE cterm=NONE guifg='#cc6666' ctermfg=9
execute 'source' fnameescape(expand('~/.vim/rc/vimshell.vim'))
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = [
  'VimFiler',
  'VimFilerExplorer',
]
on_path = '\h\w*:'
hook_add = '''
nnoremap <Plug>(my-vimfiler) <Nop>
nmap <Space>e <Plug>(my-vimfiler)
nnoremap <silent> <Plug>(my-vimfiler)e :<C-u>VimFilerExplorer<CR>
nnoremap <silent> <Plug>(my-vimfiler)E :<C-u>VimFiler<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.vim/rc/vimfiler.vim'))
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
nnoremap <Plug>(my-undotree) <Nop>
nmap <Leader>U <Plug>(my-undotree)
nnoremap <silent> <Plug>(my-undotree) :<C-u>UndotreeToggle<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = [
  'Tagbar',
  'TagbarOpen',
  'TagbarToggle',
]
hook_add = '''
nnoremap <Plug>(my-tagbar) <Nop>
nmap <Leader>t <Plug>(my-tagbar)
nnoremap <silent> <Plug>(my-tagbar) :<C-u>TagbarToggle<CR>
'''

#[[plugins]]
#repo = 'lambdalisue/vim-lista'
#on_cmd = 'Lista'
#hook_add = '''
#nnoremap # :<C-u>Lista<CR>
#nnoremap g# :<C-u>ListaCursorWord<CR>
#'''

[[plugins]]
repo = 'osyo-manga/vim-hopping'
on_cmd = 'HoppingStart'

# }}}

# Visualize {{{
[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
execute 'source' fnameescape(expand('~/.vim/rc/lightline.vim'))
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_cmd = 'AnsiEsc'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_cmd = 'PrevimOpen'
hook_source = 'let g:previm_show_header = 0'

[[plugins]]
repo = 'osyo-manga/vim-precious'
hook_add = '''
let g:context_filetype#search_offset = 50
let g:textobj_precious_no_default_key_mappings = 1
let g:precious_enable_switch_CursorHold = { '*': 0 }
let g:precious_enable_switch_CursorHold_i = { '*': 0 }
let g:precious_enable_switch_CursorMoved = { '*': 0 }
let g:precious_enable_switch_CursorMoved_i = { '*': 0 }
autocmd MyAutoCmd InsertEnter * :PreciousSwitch
autocmd MyAutoCmd InsertLeave * :PreciousReset
autocmd MyAutoCmd User PreviousFileType_vim 
      \ :PreciousSetContextLocal foldlevel=0
'''

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 't9md/vim-quickhl'
depends = 'vim-operator-user'
on_map = [
    '<Plug>',
    '<Plug>(operator-quickhl-manual'
]
hook_add = 'map H <Plug>(operator-quickhl-manual-this-motion)'

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 'itchyny/vim-cursorword'
hook_add = '''
  augroup cursorword-disable
    autocmd! *
    autocmd WinEnter,BufEnter *
          \ if &buftype =~# '^\%(nofile\|quickfix\|help\)$' |
          \   let b:cursorword = 0 |
          \ endif
  augroup END
'''

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
depends = 'shabadou.vim'
hook_add = '''
let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
hook_add = 'nmap <C-w><C-w> <Plug>(choosewin)'

# }}}

# Editing {{{
[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
autocmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords()
  silent! %s/<+FILE NAME+>/\=expand('%:t')/g
  silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
  silent! %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
  if search('<+CURSOR+>')
    execute 'normal! "_da>'
  endif
endfunction
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
on_source = ['unite.vim', 'vimfiler.vim']

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
depends = [
  'vim-operator-user',
  'vim-repeat',
  'context_filetype.vim',
]
on_map = [['nx', '<Plug>']]
hook_add = '''
let g:caw_no_default_keymappings = 1
nmap gc   <Plug>(caw:prefix)
nmap gcc  <Plug>(caw:hatpos:toggle)
nmap gci  <Plug>(caw:hatpos:comment)
nmap gcui <Plug>(caw:hatpos:uncomment)
nmap gcI  <Plug>(caw:zeropos:comment)
nmap gcuI <Plug>(caw:zeropos:uncomment)
nmap gca  <Plug>(caw:dollarpos:comment)
nmap gcua <Plug>(caw:dollarpos:uncomment)
nmap gcw  <Plug>(caw:wrap:toggle)
nmap gcb  <Plug>(caw:box:comment)
xmap gc   <Plug>(caw:prefix)
xmap gcc  <Plug>(caw:hatpos:toggle)
xmap gci  <Plug>(caw:hatpos:comment)
xmap gcui <Plug>(caw:hatpos:uncomment)
xmap gcI  <Plug>(caw:zeropos:comment)
xmap gcuI <Plug>(caw:zeropos:uncomment)
xmap gca  <Plug>(caw:dollarpos:comment)
xmap gcua <Plug>(caw:dollarpos:uncomment)
xmap gcw  <Plug>(caw:wrap:toggle)
xmap gcb  <Plug>(caw:box:comment)
nmap gco  <Plug>(caw:jump:comment-next)
nmap gcO  <Plug>(caw:jump:comment-prev)
'''

[[plugins]]
repo = 'osyo-manga/vim-trip'
on_map = '<Plug>'
hook_add = '''
nmap <C-a> <Plug>(trip-increment)
nmap <C-x> <Plug>(trip-decrement)
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
hook_add = '''
nmap p     <Plug>(yankround-p)
nmap P     <Plug>(yankround-P)
nmap gp    <Plug>(yankround-gp)
nmap gP    <Plug>(yankround-gP)
nmap <expr><C-k> yankround#is_active()
      \ ? "\<Plug>(yankround-prev)"
      \ : "\<C-k>"
nmap <expr><C-j> yankround#is_active()
      \ ? "\<Plug>(yankround-next)"
      \ : "\<C-j>"
'''
hook_source = 'let g:yankround_use_region_hl = 0'

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = [
  'OverCommandLine',
  'OverCommandLineNoremap',
]
hook_add = '''
" Use vim-over instead of builtin substitution
" http://leafcage.hateblo.jp/entry/2013/11/23/212838
cnoreabbrev <silent><expr>s getcmdtype() ==# ':' && getcmdline() =~# '^s'
      \ ? "OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>"
      \ : 's'
cnoreabbrev <silent><expr>'<,'>s getcmdtype() ==# ':' && getcmdline() =~# "^'<,'>s"
      \ ? "'<,'>OverCommandLine<CR>s/<C-r>=get([], getchar(0), '')<CR>"
      \ : "'<,'>s"
'''
hook_source = '''
let g:over_enable_auto_nohlsearch = 1
let g:over_enable_cmd_window = 1
let g:over#command_line#search#enable_incsearch = 1
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = 'nmap \ :<C-u>Switch<CR>'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'kurkale6ka/vim-swap'
on_map = '<Plug>'
hook_add = '''
nnoremap <Plug>(my-swap) <Nop>
vnoremap <Plug>(my-swap) <Nop>
nmap ~ <Plug>(my-swap)
vmap ~ <Plug>(my-swap)
vmap <Plug>(my-swap)~ <Plug>SwapSwapOperands
vmap <Plug>(my-swap)- <Plug>SwapSwapPivotOperands
nmap <Plug>(my-swap)~ <Plug>SwapSwapWithR_WORD
nmap <Plug>(my-swap)- <Plug>SwapSwapWithL_WORD
'''
hook_source = 'let g:swap_enable_default_keymaps = 0'

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = 'Findent'
hook_source = '''
autocmd MyAutoCmd FileType json,javascript    Findent --no-warnings
autocmd MyAutoCmd FileType typescript         Findent --no-warnings
autocmd MyAutoCmd FileType coffeescript       Findent --no-warnings
autocmd MyAutoCmd FileType css,scss,sass,less Findent --no-warnings
autocmd MyAutoCmd FileType xml,html           Findent --no-warnings
autocmd MyAutoCmd FileType perl,python,ruby   Findent --no-warnings
autocmd MyAutoCmd FileType help               Findent --no-warnings
'''

[[plugins]]
repo = 'lambdalisue/vim-foldround'
on_map = '<Plug>'
hook_add = '''
nmap <C-f>f     <Plug>(foldround-forward)
nmap <C-f><C-f> <Plug>(foldround-forward)
nmap <C-f>b     <Plug>(foldround-backward)
nmap <C-f><C-b> <Plug>(foldround-backward)
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_source = '''
let g:neocomplete#enable_at_startup = !has('nvim')
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = has('nvim')
'''


# }}}

# Execution {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
on_cmd = 'QuickRun'
hook_add = 'nmap <LocalLeader>r <Plug>(quickrun)'
hook_source = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner': 'vimproc',
      \ 'runner/job/interval': 200,
      \ 'runner/vimproc/interval': 200,
      \ 'outputter/buffer/split': ':botright 8sp',
      \ 'outputter/buffer/close_on_empty': 1,
      \ 'hook/time/enable': 1,
      \}
let g:quickrun_config.pyrex = {
      \ 'command': 'cython',
      \}
if exists('*ch_close_in')
  let g:quickrun_config._.runner = 'job'
endif
" Terminate the quickrun with <C-c>
nnoremap <expr><silent> <C-c> quickrun#is_running()
      \ ? quickrun#sweep_sessions()
      \ : "\<C-c>"
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = 'vim-quickrun'
hook_add = '''
let g:watchdogs_check_CursorHold_enables = {
      \ 'vim': 1,
      \ 'perl': 1,
      \ 'python': 1,
      \ 'javascript': 1,
      \ 'typescript': 1,
      \ 'html': 1,
      \ 'css': 1,
      \ 'less': 1,
      \ 'sass': 1,
      \}
let g:watchdogs_check_BufWritePost_enables =
      \ g:watchdogs_check_CursorHold_enables
let g:watchdogs_check_BufWritePost_enable_on_wq = 0

let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['watchdogs_checker/_'] = {
      \ 'outputter/quickfix/open_cmd': '',
      \ 'hook/qfstatusline_update/enable_exit': 1,
      \ 'hook/qfstatusline_update/priority_exit': 4,
      \}

" use flake8 for Python
if executable('flake8')
  let g:quickrun_config['python/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/flake8',
        \}
endif
" use vint for Vim script
if executable('vint')
  let g:quickrun_config['watchdogs_checker/vint'] = {
        \ 'command': 'vint',
        \ 'exec'   : '%c %o %s:p',
        \}
  let g:quickrun_config['vim/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/vint',
        \}
endif
call watchdogs#setup(g:quickrun_config)
'''
# }}}

# Unite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = [
  'Denite',
  'DeniteCursorWord',
]
hook_add = '''
nnoremap <Plug>(my-unite) <Nop>
nmap <Space> <Plug>(my-unite)
vmap <Space> <Plug>(my-unite)

vnoremap <silent> <Plug>(my-unite)ff :Denite file_rec<CR>
nnoremap <silent> <Plug>(my-unite)ff :<C-u>Denite file_rec<CR>
nnoremap <silent> <Plug>(my-unite)f* :<C-u>DeniteCursorWord file_rec<CR>
vnoremap <silent> <Plug>(my-unite)gg :Denite grep<CR>
nnoremap <silent> <Plug>(my-unite)gg :<C-u>Denite grep<CR>
nnoremap <silent> <Plug>(my-unite)g* :<C-u>DeniteCursorWord grep<CR>
vnoremap <silent> <Plug>(my-unite)jj :Denite jump_point<CR>
nnoremap <silent> <Plug>(my-unite)jj :<C-u>Denite jump_point<CR>
nnoremap <silent> <Plug>(my-unite)j* :<C-u>DeniteCursorWord jump_point<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.vim/rc/denite.vim'))
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = [
  'Unite',
  'UniteWithCursorWord',
  'UniteBookmarkAdd',
]
hook_add = '''
nnoremap <Plug>(my-unite) <Nop>
nmap <Space> <Plug>(my-unite)
vmap <Space> <Plug>(my-unite)

nnoremap <silent> <Plug>(my-unite)<Space> :<C-u>UniteResume -no-start-insert<CR>
nnoremap <silent> <Plug>(my-unite)w :<C-u>Unite buffer<CR>
nnoremap <silent> <Plug>(my-unite)k :<C-u>Unite bookmark<CR>
nnoremap <silent> <Plug>(my-unite)m :<C-u>Unite map -buffer-name=search<CR>
nnoremap <silent> <Plug>(my-unite)s :<C-u>Unite menu:shortcut<CR>

" unite-grep
nnoremap <silent> <Plug>(my-unite)i :<C-u>Unite grep/git:/ -buffer-name=search -no-empty<CR>
vnoremap <silent> <Plug>(my-unite)i :Unite grep/git:/ -buffer-name=search -no-empty<CR>

" unite-gista
nnoremap <silent> <Plug>(my-unite)t :<C-u>Unite gista:lambdalisue<CR>

" unite-linephrase
nnoremap <silent> <Plug>(my-unite)p
      \ :<C-u>Unite linephrase
      \ -no-quit -keep-focus -no-start-insert
      \ -buffer-name=search<CR>

" unite-outline
nnoremap <silent> <Plug>(my-unite)o
      \ :<C-u>Unite outline
      \ -no-quit -keep-focus -no-start-insert
      \ -vertical -direction=botright -winwidth=30<CR>
'''
hook_source = '''
execute 'source' fnameescape(expand('~/.vim/rc/unite.vim'))
'''

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'

[[plugins]]
repo = 'ujihisa/unite-font'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'rhysd/unite-codic.vim'

[[plugins]]
repo = 'pasela/unite-webcolorname'

[[plugins]]
repo = 'lambdalisue/unite-linephrase'
hook_source = '''
let g:linephrase#directory = expand('~/Dropbox/Apps/Vim/linephrase')
'''

[[plugins]]
repo = 'joker1007/unite-pull-request'

[[plugins]]
repo = 'dameninngenn/unite-perldoc'

[[plugins]]
repo = 'naquad/unite-digraphs'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'rafi/vim-unite-issue'

[[plugins]]
repo = 'lambdalisue/vim-gista-unite'

# }}}

# Textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap al <Plug>(textobj-line-a)
omap il <Plug>(textobj-line-i)
xmap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ay <Plug>(textobj-syntax-a)
omap iy <Plug>(textobj-syntax-i)
xmap ay <Plug>(textobj-syntax-a)
xmap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
omap aI <Plug>(textobj-indent-same-a)
omap iI <Plug>(textobj-indent-same-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-datetime'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ada <Plug>(textobj-datetime-auto)
omap add <Plug>(textobj-datetime-date)
omap adf <Plug>(textobj-datetime-full)
omap adt <Plug>(textobj-datetime-time)
omap adz <Plug>(textobj-datetime-tz)
omap ida <Plug>(textobj-datetime-auto)
omap idd <Plug>(textobj-datetime-date)
omap idf <Plug>(textobj-datetime-full)
omap idt <Plug>(textobj-datetime-time)
omap idz <Plug>(textobj-datetime-tz)
xmap ada <Plug>(textobj-datetime-auto)
xmap add <Plug>(textobj-datetime-date)
xmap adf <Plug>(textobj-datetime-full)
xmap adt <Plug>(textobj-datetime-time)
xmap adz <Plug>(textobj-datetime-tz)
xmap ida <Plug>(textobj-datetime-auto)
xmap idd <Plug>(textobj-datetime-date)
xmap idf <Plug>(textobj-datetime-full)
xmap idt <Plug>(textobj-datetime-time)
xmap idz <Plug>(textobj-datetime-tz)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ac <Plug>(textobj-comment-a)
omap ic <Plug>(textobj-comment-i)
xmap ac <Plug>(textobj-comment-a)
xmap ic <Plug>(textobj-comment-i)
'''

[[plugins]]
repo = 'saihoooooooo/vim-textobj-space'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a<Space> <Plug>(textobj-space-a)
omap i<Space> <Plug>(textobj-space-i)
xmap a<Space> <Plug>(textobj-space-a)
xmap i<Space> <Plug>(textobj-space-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap az <Plug>(textobj-fold-a)
omap iz <Plug>(textobj-fold-i)
xmap az <Plug>(textobj-fold-a)
xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-underscore'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a_ <Plug>(textobj-underscore-a)
omap i_ <Plug>(textobj-underscore-i)
xmap a_ <Plug>(textobj-underscore-a)
xmap i_ <Plug>(textobj-underscore-i)
'''

[[plugins]]
repo = 'RyanMcG/vim-textobj-dash'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap a- <Plug>(textobj-quoted-a)
omap i- <Plug>(textobj-quoted-i)
xmap a- <Plug>(textobj-quoted-a)
xmap i- <Plug>(textobj-quoted-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap au <Plug>(textobj-url-a)
omap iu <Plug>(textobj-url-i)
xmap au <Plug>(textobj-url-a)
xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap aP <Plug>(textobj-parameter-a)
omap iP <Plug>(textobj-parameter-i)
xmap aP <Plug>(textobj-parameter-a)
xmap iP <Plug>(textobj-parameter-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
xmap ab <Plug>(textobj-multiblock-a)
xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
depends = 'vim-textobj-user'
on_map = [
  ['ox', '<Plug>(textobj-wordcolumn-W-i)'],
  ['ox', '<Plug>(textobj-wordcolumn-w-i)'],
  ['ox', '<Plug>(textobj-wordcolumn-W-a)'],
  ['ox', '<Plug>(textobj-wordcolumn-w-a)'],
]
hook_add = '''
omap av <Plug>(textobj-wordcolumn-w-a)
omap iv <Plug>(textobj-wordcolumn-w-i)
xmap av <Plug>(textobj-wordcolumn-w-a)
xmap iv <Plug>(textobj-wordcolumn-w-i)

omap aV <Plug>(textobj-wordcolumn-W-a)
omap iV <Plug>(textobj-wordcolumn-W-i)
xmap aV <Plug>(textobj-wordcolumn-W-a)
xmap iV <Plug>(textobj-wordcolumn-W-i)
'''
# }}}

# Operator {{{
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -r <Plug>(operator-replace)
xmap -r <Plug>(operator-replace)
'''

[[plugins]]
repo = 'sgur/vim-operator-openbrowser'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -o <Plug>(operator-openbrowser)
xmap -o <Plug>(operator-openbrowser)
'''

[[plugins]]
repo = 'rhysd/vim-operator-trailingspace-killer'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -k <Plug>(operator-trailingspace-killer)
xmap -k <Plug>(operator-trailingspace-killer)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
depends = 'vim-operator-user'
on_map = [
  ['nx', '<Plug>(operator-sandwich'],
  ['ox', '<Plug>(textobj-sandwich'],
]
hook_add = '''
let g:operator_sandwich_no_default_key_mappings = 1

nmap sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
nmap sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
nmap sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
nmap srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

nmap sa <Plug>(operator-sandwich-add)
xmap sa <Plug>(operator-sandwich-add)
xmap sd <Plug>(operator-sandwich-delete)
xmap sr <Plug>(operator-sandwich-replace)

omap ib <Plug>(textobj-sandwich-auto-i)
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ab <Plug>(textobj-sandwich-auto-a)
xmap ab <Plug>(textobj-sandwich-auto-a)

omap is <Plug>(textobj-sandwich-query-i)
xmap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)
xmap as <Plug>(textobj-sandwich-query-a)
'''

[[plugins]]
repo = 'lambdalisue/vim-operator-breakline'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
nmap -b <Plug>(operator-breakline-manual)
nmap -B <Plug>(operator-breakline-textwidth)
xmap -b <Plug>(operator-breakline-manual)
xmap -B <Plug>(operator-breakline-textwidth)
'''

[[plugins]]
repo = 'dalance/vseq.vim'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>(operator-vseq']]
hook_add = '''
nmap <C-a> <Plug>(operator-vseq-incr-dec)
nmap <C-x> <Plug>(operator-vseq-decr-dec)
xmap <C-a> <Plug>(operator-vseq-incr-dec)
xmap <C-x> <Plug>(operator-vseq-decr-dec)
'''

# }}}

# Colorscheme {{{
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'
# }}}

# Filetype {{{
[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'vimperator/vimperator.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'groenewege/vim-less'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'jQuery'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'leafgarland/typescript-vim'
hook_source = '''
let g:typescript_indent_disable = 1
let g:typescript_compiler_options = '-sourcemap'
'''

[[plugins]]
repo = 'thinca/vim-ft-help_fold'

[[plugins]]
repo = 'applescript.vim'

[[plugins]]
repo = 'vim-perl/vim-perl'

[[plugins]]
#repo = 'motemen/xslate-vim'
repo = 'lambdalisue/xslate-vim'

[[plugins]]
repo = 'lambdalisue/vim-cython-syntax'

[[plugins]]
repo = 'hotchpotch/perldoc-vim'
on_ft = 'perl'

[[plugins]]
repo = 'c9s/perlomni.vim'
on_ft = 'perl'

[[plugins]]
repo = 'Quramy/tsuquyomi'
depends = 'vimproc.vim'
build = 'npm install -g typescript'
on_ft = 'typescript'
hook_add = '''
function! s:tsuquyomi_configure() abort
  nmap <buffer> <LocalLeader>d <Plug>(TsuquyomiDefinition)
  nmap <buffer> <LocalLeader>b <Plug>(TsuquyomiGoBack)
  nmap <buffer> <LocalLeader>r <Plug>(TsuquyomiReferences)
  nmap <buffer> <LocalLeader>R <Plug>(TsuquyomiRenameSymbolC)
  if exists('&ballooneval')
    setlocal ballooneval
    setlocal balloonexpr=tsuquyomi#balloonexpr()
  endif
endfunction
autocmd MyAutoCmd FileType typescript call s:tsuquyomi_configure()
'''

# }}}

# Python development {{{
[[plugins]]
repo = 'python_match.vim'

[[plugins]]
repo = 'tmhedberg/SimpylFold'

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_cmd = 'ImpSort'

[[plugins]]
if = "has('nvim')"
repo = 'zchee/deoplete-jedi'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'lambdalisue/vim-ledi'
on_ft = ['python', 'python3']
hook_source = '''
let g:ledi#force_py_version = 3
let g:ledi#signature#enable_on_startup = 0
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'python3']
hook_source = '''
let g:jedi#force_py_version = 3
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
let g:jedi#show_call_signatures = 0
let g:jedi#rename_command = '<Leader>R'
'''

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
on_cmd = ['PyenvActivate', 'PyenvDeactivate']
on_source = ['vim-ledi', 'jedi-vim']
hook_source = '''
function! s:auto_set_python_major_version() abort
  let major_version = pyenv#python#get_internal_major_version()
  call jedi#force_py_version(major_version)
  call ledi#python#init(major_version)
  call ledi#signature#enable()
endfunction
autocmd MyAutoCmd User vim-pyenv-activate-post   call s:auto_set_python_major_version()
autocmd MyAutoCmd User vim-pyenv-deactivate-post call s:auto_set_python_major_version()
'''

# }}}

# Vimscript development {{{
[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'Kuniwak/vint'
rtp = ''

[[plugins]]
repo = 'lambdalisue/vim-backslash'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'JunkfileOpen'

[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'vim-jp/vital-complete'
hook_add = '''
autocmd MyAutoCmd FileType vim,vimspec setlocal omnifunc=vital_complete#complete
'''

# External Vital modules {{{
[[plugins]]
repo = 'lambdalisue/vital-App-Config'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Argument'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-ArgumentParser'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-ProgressBar'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-Opener'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Buffer-Anchor'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Prompt'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Validate'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Vim-Lua-String'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-List-Chunker'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-Dict-Option'
on_source = 'vital.vim'

[[plugins]]
repo = 'lambdalisue/vital-Data-String-Formatter'
on_source = 'vital.vim'
# }}}

# }}}

# vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
