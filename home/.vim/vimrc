"-----------------------------------------------------------------------------
" Prelude {{{
if has('vim_starting')
  " Sets the character encoding inside Vim.
  set encoding=utf-8
  scriptencoding utf-8

  " Use defaults.vim and revert several settings
  if filereadable(expand("$VIMRUNTIME/defaults.vim"))
    source $VIMRUNTIME/defaults.vim
  endif
  if has('vim_starting')
    set history=10000     " increate n of command line history
  endif
  set noruler             " [slow] do not show the cursor position.

  " Do not highlight string inside C comments.
  silent! unlet c_comment_strings

  " Disable annoying bells
  set belloff=all
  set noerrorbells
  set novisualbell t_vb=

  " Disable unnecessary default plugins
  let g:loaded_gzip              = 1
  let g:loaded_tar               = 1
  let g:loaded_tarPlugin         = 1
  let g:loaded_zip               = 1
  let g:loaded_zipPlugin         = 1
  let g:loaded_rrhelper          = 1
  let g:loaded_2html_plugin      = 1
  let g:loaded_vimball           = 1
  let g:loaded_vimballPlugin     = 1
  let g:loaded_getscript         = 1
  let g:loaded_getscriptPlugin   = 1
  let g:loaded_netrw             = 1
  let g:loaded_netrwPlugin       = 1
  let g:loaded_netrwSettings     = 1
  let g:loaded_netrwFileHandlers = 1
  let g:loaded_logipat           = 1
  let g:loaded_matchparen        = 1
  let g:loaded_man               = 1
endif
" }}}

" Utility {{{
function! s:join(...) abort
  let items = map(copy(a:000), 'matchstr(v:val, ''.\{-}/\?$'')')
  return join(items, '/')
endfunction

function! s:configure_path(name, pathlist) abort
  let pathlist = split(eval(a:name), ':')
  for path in map(filter(a:pathlist, '!empty(v:val)'), 'expand(v:val)')
    if isdirectory(path) && index(pathlist, path) == -1
      call insert(pathlist, path, 0)
    endif
  endfor
  execute printf('let %s = join(pathlist, '':'')', a:name)
endfunction

function! s:pick_path(pathlist, ...) abort
  for path in map(filter(a:pathlist, '!empty(v:val)'), 'resolve(expand(v:val))')
    if isdirectory(path)
      return path
    endif
  endfor
  return ''
endfunction
" }}}

" Environment {{{
call s:configure_path('$PATH', [
      \ '/usr/local/bin',
      \ '/usr/local/texlive/2013/bin/x86_64-linux',
      \ '/usr/local/texlive/2013/bin/x86_64-darwin',
      \ '~/.pyenv/bin',
      \ '~/.plenv/bin',
      \ '~/.rbenv/bin',
      \ '~/.ndenv/bin',
      \ '~/.pyenv/shims',
      \ '~/.plenv/shims',
      \ '~/.rbenv/shims',
      \ '~/.ndenv/shims',
      \ '~/.anyenv/envs/pyenv/bin',
      \ '~/.anyenv/envs/plenv/bin',
      \ '~/.anyenv/envs/rbenv/bin',
      \ '~/.anyenv/envs/ndenv/bin',
      \ '~/.anyenv/envs/pyenv/shims',
      \ '~/.anyenv/envs/plenv/shims',
      \ '~/.anyenv/envs/rbenv/shims',
      \ '~/.anyenv/envs/ndenv/shims',
      \ '~/.cabal/bin',
      \ '~/.cache/dein/repos/github.com/thinca/vim-themis/bin',
      \ '~/.cache/dein/repos/github.com/Kuniwak/vint/bin',
      \])
call s:configure_path('$MANPATH', [
      \ '/usr/local/share/man/',
      \])
let $PYENV_ROOT = s:pick_path([
      \ '~/.anyenv/envs/pyenv',
      \ '~/.pyenv',
      \])
set viewdir=~/.view
set undodir=~/.undo
set spellfile=~/Dropbox/Vim/system/spellfile.utf-8.add
" }}}

" Language {{{

" prefer English interface
language message C

" prefer English help
set helplang=en,ja

" set default language for spell check
" cjk - ignore spell check on Asian characters (China, Japan, Korea)
set nospell
set spelllang=en_us,cjk
set fileencodings=ucs-bom,utf-8,euc-jp,iso-2022-jp,cp932,utf-16,utf-16le
set fileformats=unix,dos,mac
" }}}

" Interface {{{
set hidden              " hide the buffer instead of close
set switchbuf=useopen   " use an existing buffer instaed of creating a new one

set showmatch           " highlight a partner of cursor character
set matchtime=1         " highlight a partner ASAP
set updatetime=500      " increase speed of CursorHold autocommand
set nostartofline       " let C-D, C-U,... to keep same column
set smartcase           " override the ignorecase if the search pattern contains
                        " upper case characters
set hlsearch            " highlight found terms

set foldlevelstart=99
set foldnestmax=3       " maximum fold nesting level
set foldcolumn=3        " show fold guide


set laststatus=2        " always shows statusline
set showtabline=2       " always shows tabline
set report=0            " reports any changes
set cmdheight=2
set lazyredraw          " do not redraw while command execution

set splitright          " vsplit to right

set sessionoptions-=options

" https://ddrscott.github.io/blog/2016/sidescroll/
set sidescroll=1

" vertically split buffers for vimdiff
set diffopt& diffopt+=vertical

" move cursor previous/next line when the cursor is first/last character in the
" line and user move the cursor left/right
set whichwrap=b,s,<,>,~,[,]

" store cursor, folds, slash, and unix on view
set viewoptions=cursor,folds,slash,unix

" use rich completion system in command line
set wildmode=list:longest,full
set wildoptions=tagfile


set list          " show invisible characters
set breakindent   " every wrapped line will continue visually indented
if $LANG !=# 'C'
  set listchars=tab:»-,trail:˽,extends:»,precedes:«,nbsp:%,eol:↵
  set showbreak=\ +
else
  set listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%,eol:$
  set showbreak=\ +
endif

" }}}

" Editing {{{
set smarttab        " insert blanks according to shiftwidth
set expandtab       " use spaces instead of TAB
set softtabstop=-1  " the number of spaces that a TAB counts for
set shiftwidth=2    " the number of spaces of an indent
set shiftround      " round indent to multiple of shiftwidth with > and <

set autoindent      " copy indent from current line when starting a new line
set copyindent      " copy the structure of the existing lines indent when
                    " autoindenting a new line
set preserveindent  " Use :retab to clean up whitespace

set undofile        " keep undo history on undofile
set virtualedit=all " allow virtual editing in all modes

" t - auto-wrap text using textwidth
" c - auto-wrap comments using textwidth, inserting the
"     current comment leader automatically
" r - automatically insert the current comment leader after
"     hitting <Enter> in Insert mode
" o - automatically insert the current comment leader after
"     hitting o in Insert mode
" n - when formatting text, recognize numbered lists
" l - long lines are not broken in insert mode
" m - also break at a multi-byte character above 255.
" B - when joining lines, don't insert a space between two
"     multi-byte characters
" j - where it make sense, remove a comment leader when
"     joining lines
set formatoptions+=r
set formatoptions+=o
set formatoptions+=n
set formatoptions+=m
set formatoptions+=B
set formatoptions+=j

" use clipboard register
" - unnamed     : 'selection' in X11; clipboard in Mac OS X and Windows
" - unnamedplus : 'clipboard' in X11, Mac OS X, and Windows (but yank)
set clipboard=unnamed,unnamedplus
if has('win32') || has('win64') || has('mac')
  set clipboard-=unnamedplus
endif

" completion settings
set complete& complete-=i,d
set completeopt&
set completeopt-=preview
set completeopt+=menu,longest,noselect
set pumheight=20        " height of popup menu
set showfulltag         " show both the tag name and the search pattern

" K to search the help with the cursor word
set keywordprg=:help
" }}}

" Mapping {{{
" :help insert-index

" define <Leader> and <LocalLeader>
let g:mapleader = ','
let g:maplocalleader = ','
noremap <Leader>      <Nop>
noremap <LocalLeader> <Nop>

" Disable dengerous/annoying mappings
" ZZ - save and close Vim
" ZQ - close Vim
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
noremap <MiddleMouse>   <Nop>
noremap <2-MiddleMouse> <Nop>
noremap <3-MiddleMouse> <Nop>
noremap <4-MiddleMouse> <Nop>

" Swap ; and : in Normal and Visual mode [US keyboard]
noremap ; :
noremap : ;

" Emacs like movement in Insert/Command
noremap! <C-a> <Home>
noremap! <C-e> <End>
noremap! <C-f> <C-o>h
noremap! <C-b> <C-o>l

" Better <C-n>/<C-p> in Command
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <Up>   <C-p>
cnoremap <Down> <C-n>

" Fix unreasonable mappings by historical reason
nnoremap vv 0v$
nnoremap Y y$

" Cursor movement for Japanese
nnoremap <silent><expr> j  v:count == 0 ? 'gj' : 'j'
nnoremap <silent><expr> k  v:count == 0 ? 'gk' : 'k'
nnoremap <silent><expr> gj v:count == 0 ? 'j' : 'gj'
nnoremap <silent><expr> gk v:count == 0 ? 'k' : 'gk'

" Tab navigations
nnoremap <silent> <C-n> :<C-u>tabnext<CR>
nnoremap <silent> <C-p> :<C-u>tabprevious<CR>
nnoremap <silent> <C-t> :<C-u>tabnew<CR>

" Window resize operations with <S-Arrow>
nnoremap <S-Left>  <C-w><<CR>
nnoremap <S-Right> <C-w>><CR>
nnoremap <S-Up>    <C-w>-<CR>
nnoremap <S-Down>  <C-w>+<CR>

" Clear highlight with <C-l>
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Seemless substitution with :s<Space> {{{
cnoreabbrev <silent><expr>s getcmdtype() ==# ':' && getcmdline() =~# '^s'
      \ ? "<C-u>%s/<C-r>=get([], getchar(0), '')<CR>"
      \ : 's'
cnoreabbrev <silent><expr>'<,'>s getcmdtype() ==# ':' && getcmdline() =~# "^'<,'>s"
      \ ? "'<,'>s/<C-r>=get([], getchar(0), '')<CR>"
      \ : "'<,'>s"
" }}}

" Execute a macro over a visual range with @ {{{
function! s:execute_macro_over_visual_range() abort
  execute ":'<,'>normal @" . nr2char(getchar())
endfunction
xnoremap <silent> <Plug>(my-execute-macro)
      \ :<C-u>call <SID>execute_macro_over_visual_range()<CR>
xmap @ <Plug>(my-execute-macro)
" }}}

" Toggle quickfix window with <C-q> {{{
function! s:toggle_qf() abort
  let nwin = winnr('$')
  cclose
  if nwin == winnr('$')
    cwindow
  endif
endfunction
nnoremap <silent> <Plug>(my-toggle-quickfix)
      \ :<C-u>call <SID>toggle_qf()<CR>
nmap <C-q> <Plug>(my-toggle-quickfix)
" }}}

" Switch options with <C-s> {{{
let s:switch_allowed_options = [
      \ 'spell',
      \ 'wrap',
      \ 'expandtab',
      \ 'list',
      \ 'scrollbind',
      \ 'paste',
      \]
function! s:switch_option() abort
  echohl Question
  call inputsave()
  try
    redraw
    let fname = get(function('s:switch_option_complete'), 'name')
    let candidates = s:switch_option_complete(
          \ input('Switch: ', '', 'customlist,' . fname), '', 0
          \)
    if empty(candidates)
      echohl WarningMsg
      echo 'Canceled.'
    endif
    let option = candidates[0]
    execute printf('setlocal %s! %s?', option, option)
  finally
    echohl None
    call inputrestore()
  endtry
endfunction

function! s:switch_option_complete(arglead, cmdline, cursorpos) abort
  return filter(
        \ copy(s:switch_allowed_options),
        \ 'v:val =~# ''^'' . a:arglead'
        \)
endfunction

nnoremap <silent> <Plug>(my-switch-option) :<C-u>call <SID>switch_option()<CR>
nmap <C-s> <Plug>(my-switch-option)
" }}}

" Source Vim script file with <Leader><Leader>s {{{
if !exists('*s:source_script')
  function s:source_script(path) abort
    let path = expand(a:path)
    if !filereadable(path)
      return
    endif
    execute 'source' fnameescape(path)
    echo printf(
          \ '"%s" has sourced (%s)',
          \ simplify(fnamemodify(path, ':~:.')),
          \ strftime('%c'),
          \)
  endfunction
endif
nnoremap <silent> <Plug>(my-source-script)
      \ :<C-u>call <SID>source_script('%')<CR>
nmap <Leader><Leader>s <Plug>(my-source-script)
" }}}

" Switch colorscheme with <F3> {{{
function! s:switch_colorscheme() abort
  set background=dark
  if get(g:, 'colors_name', '') ==# 'hybrid'
    colorscheme iceberg
  else
    colorscheme hybrid
  endif
  redraw | echo g:colors_name
endfunction
nnoremap <silent> <Plug>(my-switch-colorscheme)
      \ :<C-u>call <SID>switch_colorscheme()<CR>
nmap <F3> <Plug>(my-switch-colorscheme)
" }}}

" }}}

" Macro {{{
" NOTE: Vim 7.4.1842 is required for get(Fn, 'name')
augroup MyAutoCmd
  autocmd!
augroup END

" Improve mkview/loadview {{{
function! s:checkview() abort
  if !&buflisted || &buftype =~# '^\%(nofile\|help\|quickfix\|terminal\)$' || &previewwindow
    return 0
  endif
  return 1
endfunction
autocmd MyAutoCmd BufWinLeave * if s:checkview() | silent! mkview   | endif
autocmd MyAutoCmd BufWinEnter * if s:checkview() | silent! loadview | endif
" }}}

" Automatically re-assign filetype {{{
autocmd MyAutoCmd BufWritePost *
      \ if &filetype ==# '' || exists('b:ftdetect') |
      \  unlet! b:ftdetect |
      \  filetype detect |
      \ endif
"}}}

" Automatically create missing directories {{{
function! s:auto_mkdir(dir, force) abort
  if empty(a:dir) || a:dir =~# '^\w\+://' || isdirectory(a:dir)
      return
  endif
  if !a:force
    echohl Question
    call inputsave()
    try
      let result = input(
            \ printf('"%s" does not exist. Create? [y/N]', a:dir),
            \ '',
            \ 'custom,' . get(function('s:auto_mkdir_complete'), 'name')
            \)
      if empty(result)
        echohl WarningMsg
        echo 'Canceled'
        return
      endif
    finally
      call inputrestore()
      echohl None
    endtry
  endif
  call mkdir(a:dir, 'p')
endfunction

function! s:auto_makedir_complete(...) abort
  return "yes\nno"
endfunction

autocmd MyAutoCmd BufWritePre *
      \ call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
" }}}

" Automatically change working directory on vim enter {{{
function! s:workon(dir, bang) abort
  let dir = (a:dir ==# '' ? expand('%') : a:dir)
  " convert filename to directory if required
  if filereadable(dir)
    let dir = fnamemodify(expand(dir),':p:h')
  else
    let dir = fnamemodify(dir, ':p')
  endif
  " change directory to specified directory
  if isdirectory(dir)
    silent execute 'cd ' . fnameescape(dir)
    if a:bang ==# ''
      redraw | echo 'Working on: '.dir
      if v:version > 703 || (v:version == 703 && has('patch438'))
        doautocmd <nomodeline> MyAutoCmd User my-workon-post
      else
        doautocmd MyAutoCmd User my-workon-post
      endif
    endif
  endif
endfunction
autocmd MyAutoCmd VimEnter * call s:workon(expand('<afile>'), 1)
command! -nargs=? -complete=dir -bang Workon call s:workon('<args>', '<bang>')
" }}}

" Automatically disable IM in normal mode {{{
if has('osx')
  " NOTE: 102/104 = Eisu/Kana
  " https://github.com/emacs-jp/issues/issues/10#issuecomment-36477448
  function! s:disable_im() abort
    call system('osascript -e ''tell application "System Events" to key code 102'' &')
  endfunction
elseif executable('fcitx-remote')
  " http://qiita.com/sgur/items/aa443bc2aed6fe0eb138
  function! s:disable_im() abort
    call system('fcitx-remote -c &')
  endfunction
else
  function! s:disable_im() abort
    " Dummy
  endfunction
endif
noremap <silent> <Esc> <Esc>:<C-u>call <SID>disable_im()<CR>
noremap <silent> <C-]> <Esc>:<C-u>call <SID>disable_im()<CR>
autocmd MyAutoCmd InsertLeave * call s:disable_im()
autocmd MyAutoCmd InsertEnter * call s:disable_im()
" }}}

" Add runtimepath {{{
function! s:add_runtimepath() abort
  let path = getcwd()
  execute printf('set runtimepath^=%s', fnameescape(path))
  if isdirectory(path . '/plugin')
    for filename in glob(path . '/plugin/*.vim', 0, 1)
      execute printf('source %s', fnameescape(filename))
    endfor
  endif
  echo printf('"%s" is added to &runtimepath', path)
endfunction
command! AddRuntimePath call s:add_runtimepath()
" }}}

" Show runtimepath {{{
function! s:echo_runtimepath() abort
  for path in split(&runtimepath, ',')
    echo path
  endfor
endfunction
command! EchoRuntimePath call s:echo_runtimepath()
" }}}

" }}}

" Plugin {{{
let s:bundle_root = expand('~/.cache/vim/dein')
let s:bundle_dein = s:join(s:bundle_root, 'repos/github.com/Shougo/dein.vim')
if isdirectory(s:bundle_dein)
  if has('vim_starting')
    execute 'set runtimepath^=' . fnameescape(s:bundle_dein)
  endif
  if dein#load_state(s:bundle_root)
    call dein#begin(s:bundle_root, [
          \ expand('~/.vim/vimrc'),
          \ expand('~/.vim/gvimrc'),
          \ expand('~/.vim/rc/dein.toml'),
          \])
    call dein#load_toml(expand('~/.vim/rc/dein.toml'))
    call dein#end()
    call dein#save_state()
  endif
  if !has('vim_starting')
    call dein#call_hook('source')
    call dein#call_hook('post_source')
  endif
else
  function! s:install() abort
    if !executable('git')
      echohl ErrorMsg
      echo '"git" is not executable. You need to install "git" first.'
      echohl None
      return 1
    endif
  
    echo 'Installing Shougo/dein.vim ...'
    " Check if a parent directory is available and make if not
    let parent_directory = fnamemodify(s:bundle_dein, ':h')
    if !isdirectory(parent_directory)
      call mkdir(parent_directory, 'p')
    endif
    call system(printf(
          \ 'git clone %s %s',
          \ 'https://github.com/Shougo/dein.vim',
          \ fnameescape(s:bundle_dein),
          \))
    echo 'Shougo/dein.vim has installed. Restart your Vim.'
  endfunction
  command! Install call s:install()
  echo 'Use ":Install" to install "Shougo/dein.vim"'
endif
" }}}

" Postludium {{{
filetype indent plugin on
syntax on
try
  colorscheme iceberg
catch
  colorscheme desert
endtry

" Make sure required directories exist
call s:auto_mkdir(&viewdir, 1)
call s:auto_mkdir(&undodir, 1)
call s:auto_mkdir(fnamemodify(&spellfile, ':p:h'), 1)

" Source '~/.vimrc.local' only when exists
silent call s:source_script('~/.vimrc.local')

set secure
" }}}
"-----------------------------------------------------------------------------
" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
