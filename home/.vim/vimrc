"
" Vim configuration
" Author:   Alisue <lambdalisue@hashnote.net>
" URI:      http://hashnote.net/
" Platform: Linux, Mac OS X
"
if has('vim_starting')
  if has('multi_byte')
    set ambiwidth=double
    set encoding=utf-8
    scriptencoding utf-8
  endif
  set history=10000
  set runtimepath& runtimepath+=~/.vim
endif

" Disable unnecessary features {{{
set noswapfile
set nobackup
set nowritebackup
set noerrorbells
set novisualbell t_vb=

" disable unnecessary default plugins
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
" }}}

" Environmental configure {{{
set shell=/bin/bash
let $MYVIM_HOME   = expand('~/.vim')
let $MYVIM_DATA   = expand('~/Dropbox/Apps/Vim')
let $MYVIM_VIMRC  = resolve(expand('$MYVIM_HOME/vimrc'))
let $MYVIM_GVIMRC = resolve(expand('$MYVIM_HOME/gvimrc'))

" Add several required path to $PATH
call vimrc#prepend_envpath('$PATH', [
      \ '/usr/local/bin',
      \ '/usr/local/texlive/2013/bin/x86_64-linux',
      \ '/usr/local/texlive/2013/bin/x86_64-darwin',
      \ '~/.pyenv/bin',
      \ '~/.plenv/bin',
      \ '~/.rbenv/bin',
      \ '~/.ndenv/bin',
      \ '~/.pyenv/shims',
      \ '~/.plenv/shims',
      \ '~/.rbenv/shims',
      \ '~/.ndenv/shims',
      \ '~/.anyenv/envs/pyenv/bin',
      \ '~/.anyenv/envs/plenv/bin',
      \ '~/.anyenv/envs/rbenv/bin',
      \ '~/.anyenv/envs/ndenv/bin',
      \ '~/.anyenv/envs/pyenv/shims',
      \ '~/.anyenv/envs/plenv/shims',
      \ '~/.anyenv/envs/rbenv/shims',
      \ '~/.anyenv/envs/ndenv/shims',
      \ '~/.cabal/bin',
      \ '$MYVIMRUNTIME/bundle/vim-themis/bin',
      \ '$MYVIMRUNTIME/bundle/vim-vimlint/bin',
      \])
call vimrc#prepend_envpath('$MANPATH', [
      \ '/usr/local/share/man/',
      \])
let $PYENV_ROOT = vimrc#pick_path([
      \ expand('~/.anyenv/envs/pyenv'),
      \ expand('~/.pyenv'),
      \])
set viewdir=$MYVIM_HOME/.view
set undodir=$MYVIM_HOME/.undo
set spellfile=$MYVIM_DATA/system/spellfile.utf-8.add
call vimrc#ensure_path(&viewdir)
call vimrc#ensure_path(&undodir)
call vimrc#ensure_path(fnamemodify(&spellfile, ':p:h'))

if has('gui_running') || has('nvim')
  set timeout timeoutlen=1000 ttimeoutlen=100
else
  set t_Co=256     " use 256 colors
  set ttyfast      " enable fast terminal connection
  set ttyscroll=3  " the maximum number of lines for scrolling.
                         " use small value here to prefer redraw the screen
                         " instead of scrolling
  set notimeout ttimeout ttimeoutlen=100
endif

" }}}

set modeline      " do not use modeline
" K to search the help with the cursor word
set keywordprg=:help
" every wrapped line will continue visually indented
set breakindent
set showbreak=\ +

" Language {{{

" prefer English interface
language message C

" prefer English help
set helplang=en,ja

" set default language for spell check
" cjk - ignore spell check on Asian characters (China, Japan, Korea)
set nospell
set spelllang=en_us,cjk
set fileencodings=ucs-bom,utf-8,euc-jp,iso-2022-jp,cp932,utf-16,utf-16le
set fileformats=unix,dos,mac
" }}}

" Interface {{{
set hidden              " hide the buffer instead of close
set switchbuf=useopen   " use an existing buffer instaed of creating a new one
set autoread            " automatically read the changed contents

set showmatch           " highlight a partner of cursor character
set matchtime=1         " highlight a partner ASAP
set updatetime=1000     " increase speed of CursorHold autocommand
set nostartofline       " let C-D, C-U,... to keep same column
set smartcase           " override the ignorecase if the search pattern contains
                              " upper case characters
set incsearch           " use incremental search
set wrapscan            " wrap scan
set hlsearch            " highlight found terms

set foldenable
set foldmethod=manual
set foldlevelstart=99
set foldnestmax=3       " maximum fold nesting level
set foldcolumn=3        " show fold guide

set number                " show line numbers
set list                  " show invisible characters
set laststatus=2          " always shows statusline
set scrolloff=4           " minimum number of screen lines to keep in scroll
set sidescrolloff=4       " minimum number of screen columns to keep in scroll
set cmdheight=2           " the number of screen lines to use for command line
set showcmd               " show command on statusline
set nolazyredraw          " do not redraw while command execution
set nosplitbelow          " split to top
set splitright            " vsplit to right
set report=0              " report any changes
set display=lastline      " display last line in a window AMAP
set showtabline=2         " display tabline always

" move cursor previous/next line when the cursor is first/last character in the
" line and user move the cursor left/right
set whichwrap=b,s,<,>,~,[,]

" store cursor, folds, slash, unix on view
set viewoptions=cursor,folds,slash,unix

" use rich completion system in command line
set wildmenu
set wildmode=list:longest,full
set wildoptions=tagfile

" do not display cursorline/column (it makes Vim really slow)
set nocursorline
set nocursorcolumn

if has('multi_byte') && $LANG !=# 'C'
  set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:$
else
  set listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%,eol:$
endif

" }}}

" Editing {{{
set smarttab        " insert blanks according to shiftwidth
set expandtab       " use spaces instead of TAB
set tabstop=8       " the number of spaces that a TAB counts for
set softtabstop=4   " the number of spaces that a TAB counts for
set shiftwidth=4    " the number of spaces of an indent
set shiftround      " round indent to multiple of shiftwidth with > and <

set autoindent      " copy indent from current line when starting a new line
set copyindent      " copy the structure of the existing lines indent when
                          " autoindenting a new line
set undofile        " keep undo history on undofile
set virtualedit=all " allow virtual editing in all modes

set wrap            " wrap long text
set textwidth=0     " do not automatically break

" characters which might cause a line break
set breakat& breakat-=-

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Remove a comment leader when joining lines (j)
set formatoptions& formatoptions+=j

" use clipboard register
" - unnamed     : 'selection' in X11; clipboard in Mac OS X and Windows
" - unnamedplus : 'clipboard' in X11, Mac OS X, and Windows
set clipboard^=unnamed,unnamedplus

" completion settings
set complete&
set complete-=i,d
set complete+=.,w,b,u,k,s,t
set completeopt&
set completeopt-=preview
set completeopt+=menu,longest,noselect
set pumheight=20        " height of popup menu
set showfulltag         " show both the tag name and the search pattern
" }}}

" Mapping {{{

" define <Leader> and <LocalLeader>
let g:mapleader = ';'
let g:maplocalleader = ','

" remove any existing keymap for leader and localleader
noremap <Leader> <Nop>
noremap <LocalLeader> <Nop>

" disable dengerous mappings (ZZ: save and close, ZQ close)
noremap <MiddleMouse>   <Nop>
noremap <2-MiddleMouse> <Nop>
noremap <3-MiddleMouse> <Nop>
noremap <4-MiddleMouse> <Nop>
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

" disable EX mode and assign it into gq
" gq{motion} : format the lines that {motion} moves over
nnoremap Q gq

" remove highlight with pressing ESC twice
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

" Select last paste (like gv)
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Improve cursor operation
nnoremap <silent><expr> j  v:count == 0 ? 'gj' : 'j'
nnoremap <silent><expr> k  v:count == 0 ? 'gk' : 'k'
nnoremap <silent><expr> gj v:count == 0 ? 'j' : 'gj'
nnoremap <silent><expr> gk v:count == 0 ? 'k' : 'gk'

xnoremap <silent><expr> <C-k> mode() ==# 'V'
      \ ? ':<C-u>execute printf("move -1-%d", v:count1)<CR>gv'
      \ : '<C-k>'
xnoremap <silent><expr> <C-j> mode() ==# 'V'
      \ ? ':<C-u>execute printf("move +%d", v:count1)<CR>gv'
      \ : '<C-k>'

" Emacs like binding in Insert mode
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-f> <C-o>w
inoremap <C-b> <C-o>b
inoremap <C-d> <C-o>x

" Y to yank the end of line
nnoremap Y y$

" vv to select the line, like yy, dd
nnoremap vv 0v$

" <C-p> to paste from 0 register
nnoremap <Leader>p "0p

" Better <C-n>/<C-p> in command mode
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <Up> <C-p>
cnoremap <Down> <C-n>

" simple window resize navigation
nnoremap <S-Left>  <C-w><<CR>
nnoremap <S-Right> <C-w>><CR>
nnoremap <S-Up>    <C-w>-<CR>
nnoremap <S-Down>  <C-w>+<CR>

" simple window navigation
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" tag navigation
nnoremap [t  :<C-u>tprevious<CR>
nnoremap ]t  :<C-u>tnext<CR>
nnoremap g[t :<C-u>tfirst<CR>
nnoremap g]t :<C-u>tlast<CR>

" quickfix navigation
nnoremap [q  :<C-u>cprevious<CR>
nnoremap ]q  :<C-u>cnext<CR>
nnoremap g[q :<C-u>cfirst<CR>
nnoremap g]q :<C-u>clast<CR>
nnoremap [l  :<C-u>lprevious<CR>
nnoremap ]l  :<C-u>lnext<CR>
nnoremap g[l :<C-u>lfirst<CR>
nnoremap g]l :<C-u>llast<CR>

" file navigation
nnoremap {f  :<C-u>previous<CR>
nnoremap }f  :<C-u>next<CR>
nnoremap g{f :<C-u>first<CR>
nnoremap g}f :<C-u>last<CR>

" tab operation (make similar mapping with window operation)
" ref.
function! s:tab_quit() abort
  if tabpagenr('$') == 1
    quit
  else
    tabclose
  endif
endfunction
nnoremap <silent> <Plug>(my-tab-new)  :<C-u>tabnew<CR>
nnoremap <silent> <Plug>(my-tab-quit) :<C-u>call <SID>tab_quit()<CR>
nnoremap <silent> <Plug>(my-tab-next) :<C-u>tabnext<CR>
nnoremap <silent> <Plug>(my-tab-prev) :<C-u>tabprevious<CR>
nmap <C-n> <Plug>(my-tab-next)
nmap <C-p> <Plug>(my-tab-prev)
nmap <C-t>t <Plug>(my-tab-new)
nmap <C-t><C-t> <Plug>(my-tab-new)
nmap <C-t>q <Plug>(my-tab-quit)
nmap <C-t><C-q> <Plug>(my-tab-quit)

" switch options
nnoremap <Plug>(my-switch) <Nop>
nmap <Leader>s <Plug>(my-switch)
nnoremap <silent> <Plug>(my-switch)s :<C-u>setl spell! spell?<CR>
nnoremap <silent> <Plug>(my-switch)l :<C-u>setl list! list?<CR>
nnoremap <silent> <Plug>(my-switch)t :<C-u>setl expandtab! expandtab?<CR>
nnoremap <silent> <Plug>(my-switch)w :<C-u>setl wrap! wrap?<CR>
nnoremap <silent> <Plug>(my-switch)p :<C-u>setl paste! paste?<CR>
nnoremap <silent> <Plug>(my-switch)b :<C-u>setl scrollbind! scrollbind?<CR>
nnoremap <silent> <Plug>(my-switch)y :<C-u>call <SID>toggle_syntax()<CR>
function! s:toggle_syntax() abort
  if exists('g:syntax_on')
    syntax off
    redraw
    echo 'syntax off'
  else
    syntax on
    redraw
    echo 'syntax on'
  endif
endfunction

" alias for :e ++enc= | :e ++ff=
cnoreabbrev ++u ++enc=utf8
cnoreabbrev ++s ++enc=cp932
cnoreabbrev ++e ++enc=euc-jp
cnoreabbrev ++x ++ff=unix
cnoreabbrev ++d ++ff=dos
cnoreabbrev ++m ++ff=mac

" Allow misspellings
cnoreabbrev Wq :wq
cnoreabbrev qw :wq
cnoreabbrev Qa :qa
cnoreabbrev q: :q
" }}}

" Macro {{{
augroup MyAutoCmd
  autocmd!
augroup END

" Improve mkview/loadview {{{
function! s:checkview() abort
  if !&buflisted || &buftype =~# '^\%(nofile\|quickfix\|terminal\)$'
    return 0
  endif
  return 1
endfunction
autocmd MyAutoCmd BufWinLeave * if s:checkview() | silent! mkview   | endif
autocmd MyAutoCmd BufReadPost * if s:checkview() | silent! loadview | endif
" }}}

" Seemless substitution {{{
cnoreabbrev <silent><expr>s getcmdtype() ==# ':' && getcmdline() =~# '^s'
      \ ? "<C-u>%s/<C-r>=get([], getchar(0), '')<CR>"
      \ : 's'
cnoreabbrev <silent><expr>'<,'>s getcmdtype() ==# ':' && getcmdline() =~# "^'<,'>s"
      \ ? "'<,'>s/<C-r>=get([], getchar(0), '')<CR>"
      \ : "'<,'>s"
" }}}

" Reload vimrc with <Leader><Leader>r {{{
if !exists('*s:reload_vimrc')
  function! s:reload_vimrc() abort
    call vimrc#source_path($MYVIM_VIMRC, 1)
    if has('gui_running')
      call vimrc#source_path($MYVIM_GVIMRC, 1)
      redraw | echo printf('"%s" and "%s" has sourced (%s).',
            \ fnamemodify($MYVIM_VIMRC, ':t'),
            \ fnamemodify($MYVIM_GVIMRC, ':t'),
            \ strftime('%c')
            \)
    else
      redraw | echo printf('"%s" has sourced (%s).',
            \ fnamemodify($MYVIM_VIMRC, ':t'),
            \ strftime('%c')
            \)
    endif
  endfunction
endif
nnoremap <silent> <Plug>(my-reload-vimrc)
      \ :<C-u>call <SID>reload_vimrc()<CR>
nmap <Leader><Leader>r <Plug>(my-reload-vimrc)
" }}}

" source/reload current vimscript file " {{{
if !exists('*s:source_current_path')
  function! s:source_current_path() abort
    let abspath = resolve(expand('%:p'))
    if &filetype !=# 'vim'
      redraw
      echohl WarningMsg
      echo printf(
            \ 'The filetype of the current buffer is "%s" but it must be "vim" for source.',
            \ &filetype,
            \)
      echohl None
      return
    endif
    call vimrc#source_path(expand('%'))
    redraw | echo printf('"%s" has sourced (%s).', expand('%:t'), strftime('%c'))
  endfunction
endif
nmap <silent> <Plug>(my-source) :<C-u>call <SID>source_current_path()<CR>
nmap <LocalLeader><LocalLeader>s <Plug>(my-source)
" }}}

" automatically create missing directories {{{
function! s:makedirs(dir, force) abort
  if a:dir =~# '^.\{-}://'
      " Non local file, ignore
      return
  endif
  if !isdirectory(a:dir)
    if a:force || input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$'
      call mkdir(a:dir, 'p')
    endif
  endif
endfunction
autocmd MyAutoCmd BufWritePre * call s:makedirs(expand('<afile>:p:h'), v:cmdbang)
" }}}

" automatically change working directory on vim enter {{{
function! s:workon(dir, bang) abort
  let dir = (a:dir ==# '' ? expand('%') : a:dir)
  " convert filename to directory if required
  if filereadable(dir)
    let dir = fnamemodify(expand(dir),':p:h')
  else
    let dir = fnamemodify(dir, ':p')
  endif
  " change directory to specified directory
  if isdirectory(dir)
    silent execute 'cd ' . fnameescape(dir)
    if a:bang ==# ''
      redraw | echo 'Working on: '.dir
      if v:version > 703 || (v:version == 703 && has('patch438'))
        doautocmd <nomodeline> MyAutoCmd User my-workon-post
      else
        doautocmd MyAutoCmd User my-workon-post
      endif
    endif
  endif
endfunction
autocmd MyAutoCmd VimEnter * call s:workon(expand('<afile>'), 1)
command! -nargs=? -complete=dir -bang Workon call s:workon('<args>', '<bang>')
" }}}

" toggle quickfix window {{{
function! s:toggle_qf() abort
  let nwin = winnr('$')
  cclose
  if nwin == winnr('$')
    cwindow
  endif
endfunction
nnoremap <silent> <Leader>q :call <SID>toggle_qf()<CR>
" }}}

" Automatically re-assign filetype {{{
autocmd MyAutoCmd BufWritePost *
      \ if &filetype ==# '' || exists('b:ftdetect') |
      \  unlet! b:ftdetect |
      \  filetype detect |
      \ endif
"}}}

" Use relative syntax when the file is too big {{{
autocmd MyAutoCmd Syntax *
      \ if line('%') > 1000 |
      \  syntax sync minlines=100 |
      \ endif
" }}}

" Profiling a command {{{
function! s:timeit(q_args) abort
  let q_args = a:q_args
  let q_args = substitute(q_args, '^[\t :]\+', '', '')
  let q_args = substitute(q_args, '\s\+$', '', '')
  let args = substitute(q_args, '^[ :]*!', '', '')
  let start = reltime()
  try
    if q_args !=# '' && q_args[0] ==# '!'
      echo system(args)
    else
      execute q_args
    endif
  finally
    echomsg printf('Timeit: %s s [%s]', reltimestr(reltime(start)), a:q_args)
  endtry
endfunction
command! -nargs=+ -bang -complete=command Timeit call s:timeit(<q-args>)
" }}}

" Clear messages {{{
function! s:message_clear() abort
  for i in range(201)
    echomsg ''
  endfor
endfunction
command! -nargs=0 MessageClear call s:message_clear()
" }}}

" Better macro {{{
function! s:execute_macro_over_visual_range() abort
  execute ":'<,'>normal @" . nr2char(getchar())
endfunction
xnoremap <silent> <Plug>(my-execute-macro)
      \ :<C-u>call <SID>execute_macro_over_visual_range()<CR>
xmap @ <Plug>(my-execute-macro)
" }}}

" }}}

"call vimrc#source_path('$MYVIM_HOME/rc/neobundle.vim', !has('vim_starting'))
call vimrc#source_path('$MYVIM_HOME/rc/dein.vim', !has('vim_starting'))

filetype indent plugin on
syntax on
colorscheme hybrid

call vimrc#source_path('~/.vimrc.local', !has('vim_starting'))
set secure
" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
